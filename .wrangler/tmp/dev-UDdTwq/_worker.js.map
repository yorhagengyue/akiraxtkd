{
  "version": 3,
  "sources": ["../bundle-0gcos7/checked-fetch.js", "wrangler-modules-watch:wrangler:modules-watch", "../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/modules-watch-stub.js", "../../../functions/lib/jwt.ts", "../../../functions/lib/password.ts", "../../../functions/api/auth.ts", "../../../functions/api/env-info.ts", "../../../functions/api/dashboard.ts", "../../../functions/api/students.ts", "../bundle-0gcos7/middleware-loader.entry.ts", "../bundle-0gcos7/middleware-insertion-facade.js", "../../../functions/_worker.js", "../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "C:\\Users\\gengy\\Desktop\\akiraxtkd.com\\.wrangler\\tmp\\dev-UDdTwq",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", "/**\r\n * JWT Authentication Library\r\n * Secure token generation, validation, and management\r\n */\r\n\r\nimport { Env } from '../types';\r\n\r\ninterface JWTPayload {\r\n  user_id: string;\r\n  email: string;\r\n  role: string;\r\n  display_name: string;\r\n  iat: number;  // issued at\r\n  exp: number;  // expires at\r\n  jti: string;  // JWT ID for revocation\r\n}\r\n\r\ninterface TokenPair {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n  expiresIn: number;\r\n  refreshExpiresIn: number;\r\n}\r\n\r\n// Token configuration\r\nconst JWT_CONFIG = {\r\n  ACCESS_TOKEN_EXPIRY: 15 * 60, // 15 minutes\r\n  REFRESH_TOKEN_EXPIRY: 7 * 24 * 60 * 60, // 7 days\r\n  ISSUER: 'akiraxtkd.com',\r\n  ALGORITHM: 'HS256'\r\n};\r\n\r\n/**\r\n * Generate JWT secret key from environment\r\n */\r\nfunction getJWTSecret(env: Env): string {\r\n  return env.JWT_SECRET || 'dev-secret-key-change-in-production';\r\n}\r\n\r\n/**\r\n * Generate a secure random string for JTI\r\n */\r\nfunction generateJTI(): string {\r\n  const array = new Uint8Array(16);\r\n  crypto.getRandomValues(array);\r\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\r\n}\r\n\r\n/**\r\n * Create JWT header and payload\r\n */\r\nfunction createJWTComponents(payload: Omit<JWTPayload, 'iat' | 'exp' | 'jti'>, expirySeconds: number) {\r\n  const now = Math.floor(Date.now() / 1000);\r\n  \r\n  const header = {\r\n    alg: JWT_CONFIG.ALGORITHM,\r\n    typ: 'JWT'\r\n  };\r\n\r\n  const fullPayload: JWTPayload = {\r\n    ...payload,\r\n    iat: now,\r\n    exp: now + expirySeconds,\r\n    jti: generateJTI(),\r\n    iss: JWT_CONFIG.ISSUER\r\n  };\r\n\r\n  return { header, payload: fullPayload };\r\n}\r\n\r\n/**\r\n * Base64 URL encode\r\n */\r\nfunction base64UrlEncode(str: string): string {\r\n  const base64 = btoa(str);\r\n  return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\r\n}\r\n\r\n/**\r\n * Base64 URL decode\r\n */\r\nfunction base64UrlDecode(str: string): string {\r\n  str = str.replace(/-/g, '+').replace(/_/g, '/');\r\n  while (str.length % 4) {\r\n    str += '=';\r\n  }\r\n  return atob(str);\r\n}\r\n\r\n/**\r\n * Create HMAC signature\r\n */\r\nasync function createSignature(data: string, secret: string): Promise<string> {\r\n  const encoder = new TextEncoder();\r\n  const key = await crypto.subtle.importKey(\r\n    'raw',\r\n    encoder.encode(secret),\r\n    { name: 'HMAC', hash: 'SHA-256' },\r\n    false,\r\n    ['sign']\r\n  );\r\n  \r\n  const signature = await crypto.subtle.sign('HMAC', key, encoder.encode(data));\r\n  const signatureArray = new Uint8Array(signature);\r\n  const signatureString = String.fromCharCode.apply(null, Array.from(signatureArray));\r\n  return base64UrlEncode(signatureString);\r\n}\r\n\r\n/**\r\n * Verify HMAC signature\r\n */\r\nasync function verifySignature(data: string, signature: string, secret: string): Promise<boolean> {\r\n  try {\r\n    const expectedSignature = await createSignature(data, secret);\r\n    return expectedSignature === signature;\r\n  } catch (error) {\r\n    console.error('Signature verification error:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Generate JWT token\r\n */\r\nexport async function generateJWT(\r\n  user: { user_id: string; email: string; role: string; display_name: string },\r\n  env: Env,\r\n  expirySeconds: number = JWT_CONFIG.ACCESS_TOKEN_EXPIRY\r\n): Promise<string> {\r\n  try {\r\n    const secret = getJWTSecret(env);\r\n    const { header, payload } = createJWTComponents(user, expirySeconds);\r\n    \r\n    const headerEncoded = base64UrlEncode(JSON.stringify(header));\r\n    const payloadEncoded = base64UrlEncode(JSON.stringify(payload));\r\n    const data = `${headerEncoded}.${payloadEncoded}`;\r\n    \r\n    const signature = await createSignature(data, secret);\r\n    \r\n    return `${data}.${signature}`;\r\n  } catch (error) {\r\n    console.error('JWT generation error:', error);\r\n    throw new Error('Failed to generate JWT token');\r\n  }\r\n}\r\n\r\n/**\r\n * Verify and decode JWT token\r\n */\r\nexport async function verifyJWT(token: string, env: Env): Promise<JWTPayload | null> {\r\n  try {\r\n    const parts = token.split('.');\r\n    if (parts.length !== 3) {\r\n      return null;\r\n    }\r\n\r\n    const [headerEncoded, payloadEncoded, signature] = parts;\r\n    const data = `${headerEncoded}.${payloadEncoded}`;\r\n    const secret = getJWTSecret(env);\r\n    \r\n    // Verify signature\r\n    const isValid = await verifySignature(data, signature, secret);\r\n    if (!isValid) {\r\n      return null;\r\n    }\r\n\r\n    // Decode payload\r\n    const payloadJson = base64UrlDecode(payloadEncoded);\r\n    const payload: JWTPayload = JSON.parse(payloadJson);\r\n    \r\n    // Check expiration\r\n    const now = Math.floor(Date.now() / 1000);\r\n    if (payload.exp < now) {\r\n      return null;\r\n    }\r\n\r\n    // Check issuer\r\n    if (payload.iss !== JWT_CONFIG.ISSUER) {\r\n      return null;\r\n    }\r\n\r\n    return payload;\r\n  } catch (error) {\r\n    console.error('JWT verification error:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Generate token pair (access + refresh)\r\n */\r\nexport async function generateTokenPair(\r\n  user: { user_id: string; email: string; role: string; display_name: string },\r\n  env: Env\r\n): Promise<TokenPair> {\r\n  try {\r\n    const accessToken = await generateJWT(user, env, JWT_CONFIG.ACCESS_TOKEN_EXPIRY);\r\n    const refreshToken = await generateJWT(user, env, JWT_CONFIG.REFRESH_TOKEN_EXPIRY);\r\n    \r\n    return {\r\n      accessToken,\r\n      refreshToken,\r\n      expiresIn: JWT_CONFIG.ACCESS_TOKEN_EXPIRY,\r\n      refreshExpiresIn: JWT_CONFIG.REFRESH_TOKEN_EXPIRY\r\n    };\r\n  } catch (error) {\r\n    console.error('Token pair generation error:', error);\r\n    throw new Error('Failed to generate token pair');\r\n  }\r\n}\r\n\r\n/**\r\n * Refresh access token using refresh token\r\n */\r\nexport async function refreshAccessToken(refreshToken: string, env: Env): Promise<string | null> {\r\n  try {\r\n    const payload = await verifyJWT(refreshToken, env);\r\n    if (!payload) {\r\n      return null;\r\n    }\r\n\r\n    // Generate new access token\r\n    const user = {\r\n      user_id: payload.user_id,\r\n      email: payload.email,\r\n      role: payload.role,\r\n      display_name: payload.display_name\r\n    };\r\n\r\n    return await generateJWT(user, env, JWT_CONFIG.ACCESS_TOKEN_EXPIRY);\r\n  } catch (error) {\r\n    console.error('Token refresh error:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Extract user from JWT token\r\n */\r\nexport async function getUserFromToken(token: string, env: Env): Promise<any | null> {\r\n  const payload = await verifyJWT(token, env);\r\n  if (!payload) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    user_id: payload.user_id,\r\n    email: payload.email,\r\n    role: payload.role,\r\n    display_name: payload.display_name\r\n  };\r\n}\r\n\r\n/**\r\n * Blacklist token (for logout)\r\n * In production, this should use a distributed cache like Redis\r\n */\r\nconst tokenBlacklist = new Set<string>();\r\n\r\nexport function blacklistToken(jti: string): void {\r\n  tokenBlacklist.add(jti);\r\n}\r\n\r\nexport function isTokenBlacklisted(jti: string): boolean {\r\n  return tokenBlacklist.has(jti);\r\n}\r\n\r\n/**\r\n * Decode JWT without verification (for getting JTI)\r\n */\r\nexport function decodeJWTUnsafe(token: string): JWTPayload | null {\r\n  try {\r\n    const parts = token.split('.');\r\n    if (parts.length !== 3) {\r\n      return null;\r\n    }\r\n\r\n    const payloadJson = base64UrlDecode(parts[1]);\r\n    return JSON.parse(payloadJson);\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Authentication middleware\r\n */\r\nexport async function requireAuth(request: Request, env: Env): Promise<any> {\r\n  const authHeader = request.headers.get('Authorization');\r\n  \r\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n    throw new Error('Authentication required');\r\n  }\r\n\r\n  const token = authHeader.substring(7);\r\n  const user = await getUserFromToken(token, env);\r\n  \r\n  if (!user) {\r\n    throw new Error('Invalid or expired token');\r\n  }\r\n\r\n  // Check if token is blacklisted\r\n  const payload = decodeJWTUnsafe(token);\r\n  if (payload && isTokenBlacklisted(payload.jti)) {\r\n    throw new Error('Token has been revoked');\r\n  }\r\n\r\n  return user;\r\n}\r\n\r\n/**\r\n * Role-based authorization middleware\r\n */\r\nexport function requireRole(allowedRoles: string[]) {\r\n  return (user: any) => {\r\n    if (!allowedRoles.includes(user.role)) {\r\n      throw new Error('Insufficient permissions');\r\n    }\r\n    return user;\r\n  };\r\n}\r\n\r\nexport default {\r\n  generateJWT,\r\n  verifyJWT,\r\n  generateTokenPair,\r\n  refreshAccessToken,\r\n  getUserFromToken,\r\n  blacklistToken,\r\n  isTokenBlacklisted,\r\n  decodeJWTUnsafe,\r\n  requireAuth,\r\n  requireRole,\r\n  JWT_CONFIG\r\n};\r\n", "/**\r\n * Password Hashing and Verification Utilities\r\n * Using Web Crypto API for secure password hashing\r\n */\r\n\r\n/**\r\n * Generate a random salt\r\n */\r\nasync function generateSalt(): Promise<string> {\r\n  const array = new Uint8Array(16);\r\n  crypto.getRandomValues(array);\r\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\r\n}\r\n\r\n/**\r\n * Hash password using PBKDF2\r\n */\r\nasync function hashPassword(password: string, salt: string): Promise<string> {\r\n  const encoder = new TextEncoder();\r\n  const keyMaterial = await crypto.subtle.importKey(\r\n    'raw',\r\n    encoder.encode(password),\r\n    { name: 'PBKDF2' },\r\n    false,\r\n    ['deriveBits', 'deriveKey']\r\n  );\r\n\r\n  const key = await crypto.subtle.deriveKey(\r\n    {\r\n      name: 'PBKDF2',\r\n      salt: encoder.encode(salt),\r\n      iterations: 100000,\r\n      hash: 'SHA-256',\r\n    },\r\n    keyMaterial,\r\n    { name: 'AES-GCM', length: 256 },\r\n    true,\r\n    ['encrypt', 'decrypt']\r\n  );\r\n\r\n  const exported = await crypto.subtle.exportKey('raw', key);\r\n  const hashArray = new Uint8Array(exported);\r\n  return Array.from(hashArray, byte => byte.toString(16).padStart(2, '0')).join('');\r\n}\r\n\r\n/**\r\n * Create password hash with salt\r\n */\r\nexport async function createPasswordHash(password: string): Promise<string> {\r\n  const salt = await generateSalt();\r\n  const hash = await hashPassword(password, salt);\r\n  return `${salt}:${hash}`;\r\n}\r\n\r\n/**\r\n * Verify password against hash\r\n */\r\nexport async function verifyPassword(password: string, storedHash: string): Promise<boolean> {\r\n  try {\r\n    const [salt, hash] = storedHash.split(':');\r\n    if (!salt || !hash) {\r\n      return false;\r\n    }\r\n    \r\n    const newHash = await hashPassword(password, salt);\r\n    return newHash === hash;\r\n  } catch (error) {\r\n    console.error('Password verification error:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Check if password meets security requirements\r\n */\r\nexport function validatePasswordStrength(password: string): {\r\n  isValid: boolean;\r\n  errors: string[];\r\n} {\r\n  const errors: string[] = [];\r\n  \r\n  if (password.length < 8) {\r\n    errors.push('Password must be at least 8 characters long');\r\n  }\r\n  \r\n  if (!/[a-z]/.test(password)) {\r\n    errors.push('Password must contain at least one lowercase letter');\r\n  }\r\n  \r\n  if (!/[A-Z]/.test(password)) {\r\n    errors.push('Password must contain at least one uppercase letter');\r\n  }\r\n  \r\n  if (!/\\d/.test(password)) {\r\n    errors.push('Password must contain at least one number');\r\n  }\r\n  \r\n  // Optional: special characters\r\n  // if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\r\n  //   errors.push('Password must contain at least one special character');\r\n  // }\r\n  \r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n}\r\n\r\nexport default {\r\n  createPasswordHash,\r\n  verifyPassword,\r\n  validatePasswordStrength\r\n};\r\n", "/**\n * Authentication API Endpoints\n * Handles user login, registration, and session management\n */\n\ninterface Env {\n  DB: D1Database;\n  ENVIRONMENT: string;\n  DEV_MODE: string;\n  AUTH_ENABLED: string;\n  DEV_USERS_ENABLED: string;\n}\n\ninterface UserAccount {\n  user_id: string;\n  email: string;\n  google_id?: string;\n  firebase_uid: string;\n  role: 'student' | 'coach' | 'admin';\n  status: 'active' | 'inactive' | 'suspended';\n  display_name?: string;\n  photo_url?: string;\n  email_verified: boolean;\n  provider: 'google' | 'email' | 'dev';\n  last_login_at?: string;\n  login_count: number;\n  terms_accepted_at?: string;\n  privacy_accepted_at?: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface LoginRequest {\n  firebase_token?: string;\n  dev_user_email?: string;\n  email?: string;\n  password?: string;\n}\n\ninterface LoginResponse {\n  success: boolean;\n  user?: UserAccount;\n  session_token?: string;\n  error?: string;\n  dev_mode?: boolean;\n}\n\n// CORS headers for all responses\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n};\n\n/**\n * Handle CORS preflight requests\n */\nfunction handleCORS(): Response {\n  return new Response(null, {\n    status: 200,\n    headers: corsHeaders,\n  });\n}\n\n/**\n * Create JSON response with CORS headers\n */\nfunction jsonResponse(data: any, status: number = 200): Response {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      ...corsHeaders,\n    },\n  });\n}\n\n/**\n * Verify Firebase ID Token (placeholder for production)\n */\nasync function verifyFirebaseToken(token: string): Promise<any> {\n  // TODO: Implement Firebase Admin SDK verification\n  // For now, return mock data for development\n  return {\n    uid: 'firebase_' + Date.now(),\n    email: 'user@example.com',\n    name: 'Test User',\n    picture: 'https://example.com/avatar.jpg',\n    email_verified: true,\n  };\n}\n\n/**\n * Get or create user account in D1 database\n */\nasync function getOrCreateUser(db: D1Database, firebaseUser: any, provider: string = 'google'): Promise<UserAccount> {\n  // Check if user exists\n  const existingUser = await db\n    .prepare('SELECT * FROM user_accounts WHERE firebase_uid = ? OR email = ?')\n    .bind(firebaseUser.uid, firebaseUser.email)\n    .first<UserAccount>();\n\n  if (existingUser) {\n    // Update last login\n    await db\n      .prepare(`\n        UPDATE user_accounts \n        SET last_login_at = CURRENT_TIMESTAMP, \n            login_count = login_count + 1,\n            updated_at = CURRENT_TIMESTAMP\n        WHERE user_id = ?\n      `)\n      .bind(existingUser.user_id)\n      .run();\n\n    return existingUser;\n  }\n\n  // Create new user\n  const userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  \n  await db\n    .prepare(`\n      INSERT INTO user_accounts (\n        user_id, email, firebase_uid, role, status, display_name, \n        photo_url, email_verified, provider, login_count,\n        created_at, updated_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n    `)\n    .bind(\n      userId,\n      firebaseUser.email,\n      firebaseUser.uid,\n      'student', // Default role\n      'active',\n      firebaseUser.name || firebaseUser.email,\n      firebaseUser.picture || null,\n      firebaseUser.email_verified || false,\n      provider,\n      1\n    )\n    .run();\n\n  // Fetch the created user\n  const newUser = await db\n    .prepare('SELECT * FROM user_accounts WHERE user_id = ?')\n    .bind(userId)\n    .first<UserAccount>();\n\n  if (!newUser) {\n    throw new Error('Failed to create user account');\n  }\n\n  return newUser;\n}\n\n/**\n * Development mode: Get dev user by email\n */\nasync function getDevUser(db: D1Database, email: string): Promise<UserAccount | null> {\n  const user = await db\n    .prepare('SELECT * FROM user_accounts WHERE email = ? AND provider = ?')\n    .bind(email, 'dev')\n    .first<UserAccount>();\n\n  if (user) {\n    // Update last login for dev user\n    await db\n      .prepare(`\n        UPDATE user_accounts \n        SET last_login_at = CURRENT_TIMESTAMP, \n            login_count = login_count + 1,\n            updated_at = CURRENT_TIMESTAMP\n        WHERE user_id = ?\n      `)\n      .bind(user.user_id)\n      .run();\n  }\n\n  return user;\n}\n\n/**\n * Import JWT utilities and password hashing\n */\nimport { generateTokenPair, refreshAccessToken, requireAuth, blacklistToken, decodeJWTUnsafe } from '../lib/jwt';\nimport { verifyPassword, createPasswordHash } from '../lib/password';\n\n/**\n * Handle login request\n */\nasync function handleLogin(request: Request, env: Env): Promise<Response> {\n  try {\n    const body: LoginRequest = await request.json();\n    const isDev = env.DEV_MODE === 'true';\n    const authEnabled = env.AUTH_ENABLED === 'true';\n    const devUsersEnabled = env.DEV_USERS_ENABLED === 'true';\n\n    // Email/Password login\n    if (body.email && body.password) {\n      const user = await env.DB\n        .prepare('SELECT * FROM user_accounts WHERE email = ?')\n        .bind(body.email)\n        .first<UserAccount>();\n      \n      if (!user) {\n        return jsonResponse({\n          success: false,\n          error: 'Invalid email or password',\n          dev_mode: isDev,\n        }, 401);\n      }\n\n      // Verify password\n      let passwordValid = false;\n      \n      // For demo users, check both demo_password and password_hash\n      if (user.demo_password && user.demo_password === body.password) {\n        passwordValid = true;\n        \n        // Hash the demo password and store it for future use\n        if (!user.password_hash) {\n          const hashedPassword = await createPasswordHash(body.password);\n          await env.DB\n            .prepare('UPDATE user_accounts SET password_hash = ? WHERE user_id = ?')\n            .bind(hashedPassword, user.user_id)\n            .run();\n        }\n      } else if (user.password_hash) {\n        passwordValid = await verifyPassword(body.password, user.password_hash);\n      }\n      \n      if (!passwordValid) {\n        return jsonResponse({\n          success: false,\n          error: 'Invalid email or password',\n          dev_mode: isDev,\n        }, 401);\n      }\n\n      // Update last login\n      await env.DB\n        .prepare(`\n          UPDATE user_accounts \n          SET last_login_at = CURRENT_TIMESTAMP, \n              login_count = login_count + 1,\n              updated_at = CURRENT_TIMESTAMP\n          WHERE user_id = ?\n        `)\n        .bind(user.user_id)\n        .run();\n\n      // Generate JWT token pair\n      const tokenPair = await generateTokenPair({\n        user_id: user.user_id,\n        email: user.email,\n        role: user.role,\n        display_name: user.display_name || user.email\n      }, env);\n\n      return jsonResponse({\n        success: true,\n        user,\n        access_token: tokenPair.accessToken,\n        refresh_token: tokenPair.refreshToken,\n        expires_in: tokenPair.expiresIn,\n        token_type: 'Bearer',\n        dev_mode: isDev,\n      });\n    }\n\n    // Development mode login (legacy)\n    if (isDev && !authEnabled && devUsersEnabled && body.dev_user_email) {\n      const devUser = await getDevUser(env.DB, body.dev_user_email);\n      \n      if (!devUser) {\n        return jsonResponse({\n          success: false,\n          error: 'Development user not found',\n          dev_mode: true,\n        }, 404);\n      }\n\n      // Generate JWT token pair for dev user\n      const tokenPair = await generateTokenPair({\n        user_id: devUser.user_id,\n        email: devUser.email,\n        role: devUser.role,\n        display_name: devUser.display_name || devUser.email\n      }, env);\n\n      return jsonResponse({\n        success: true,\n        user: devUser,\n        access_token: tokenPair.accessToken,\n        refresh_token: tokenPair.refreshToken,\n        expires_in: tokenPair.expiresIn,\n        token_type: 'Bearer',\n        dev_mode: true,\n      });\n    }\n\n    // Production mode login with Firebase\n    if (authEnabled && body.firebase_token) {\n      try {\n        const firebaseUser = await verifyFirebaseToken(body.firebase_token);\n        const user = await getOrCreateUser(env.DB, firebaseUser);\n        // Generate JWT token pair for Firebase user\n        const tokenPair = await generateTokenPair({\n          user_id: user.user_id,\n          email: user.email,\n          role: user.role,\n          display_name: user.display_name || user.email\n        }, env);\n\n        return jsonResponse({\n          success: true,\n          user,\n          access_token: tokenPair.accessToken,\n          refresh_token: tokenPair.refreshToken,\n          expires_in: tokenPair.expiresIn,\n          token_type: 'Bearer',\n          dev_mode: false,\n        });\n      } catch (error) {\n        return jsonResponse({\n          success: false,\n          error: 'Invalid Firebase token',\n          dev_mode: false,\n        }, 401);\n      }\n    }\n\n    return jsonResponse({\n      success: false,\n      error: 'Invalid login request',\n      dev_mode: isDev,\n    }, 400);\n\n  } catch (error) {\n    console.error('Login error:', error);\n    return jsonResponse({\n      success: false,\n      error: 'Internal server error',\n    }, 500);\n  }\n}\n\n/**\n * Handle logout request\n */\nasync function handleLogout(request: Request, env: Env): Promise<Response> {\n  try {\n    const authHeader = request.headers.get('Authorization');\n    \n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      const token = authHeader.substring(7);\n      const payload = decodeJWTUnsafe(token);\n      \n      if (payload && payload.jti) {\n        // Blacklist the token\n        blacklistToken(payload.jti);\n      }\n    }\n\n    return jsonResponse({\n      success: true,\n      message: 'Logged out successfully'\n    });\n  } catch (error) {\n    console.error('Logout error:', error);\n    return jsonResponse({\n      success: false,\n      error: 'Logout failed'\n    }, 500);\n  }\n}\n\n/**\n * Handle token refresh request\n */\nasync function handleRefresh(request: Request, env: Env): Promise<Response> {\n  try {\n    const body = await request.json();\n    const { refresh_token } = body;\n\n    if (!refresh_token) {\n      return jsonResponse({\n        success: false,\n        error: 'Refresh token required'\n      }, 400);\n    }\n\n    const newAccessToken = await refreshAccessToken(refresh_token, env);\n    \n    if (!newAccessToken) {\n      return jsonResponse({\n        success: false,\n        error: 'Invalid or expired refresh token'\n      }, 401);\n    }\n\n    return jsonResponse({\n      success: true,\n      access_token: newAccessToken,\n      token_type: 'Bearer',\n      expires_in: 15 * 60 // 15 minutes\n    });\n  } catch (error) {\n    console.error('Token refresh error:', error);\n    return jsonResponse({\n      success: false,\n      error: 'Token refresh failed'\n    }, 500);\n  }\n}\n\n/**\n * Get current user info\n */\nasync function handleMe(request: Request, env: Env): Promise<Response> {\n  try {\n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return jsonResponse({\n        success: false,\n        error: 'No authorization token provided',\n      }, 401);\n    }\n\n    const token = authHeader.substring(7);\n    \n    try {\n      // Decode session token (in production, verify JWT signature)\n      const payload = JSON.parse(atob(token));\n      \n      // Check if token is expired\n      if (payload.exp < Date.now()) {\n        return jsonResponse({\n          success: false,\n          error: 'Token expired',\n        }, 401);\n      }\n\n      // Get current user data from database\n      const user = await env.DB\n        .prepare('SELECT * FROM user_accounts WHERE user_id = ?')\n        .bind(payload.user_id)\n        .first<UserAccount>();\n\n      if (!user) {\n        return jsonResponse({\n          success: false,\n          error: 'User not found',\n        }, 404);\n      }\n\n      return jsonResponse({\n        success: true,\n        user,\n      });\n\n    } catch (error) {\n      return jsonResponse({\n        success: false,\n        error: 'Invalid token',\n      }, 401);\n    }\n\n  } catch (error) {\n    console.error('Me endpoint error:', error);\n    return jsonResponse({\n      success: false,\n      error: 'Internal server error',\n    }, 500);\n  }\n}\n\n/**\n * Get development users (only in dev mode)\n */\nasync function handleDevUsers(request: Request, env: Env): Promise<Response> {\n  const isDev = env.DEV_MODE === 'true';\n  const devUsersEnabled = env.DEV_USERS_ENABLED === 'true';\n\n  if (!isDev || !devUsersEnabled) {\n    return jsonResponse({\n      success: false,\n      error: 'Development users not available',\n    }, 403);\n  }\n\n  try {\n    const devUsers = await env.DB\n      .prepare('SELECT user_id, email, role, display_name, status FROM user_accounts WHERE provider = ? ORDER BY role')\n      .bind('dev')\n      .all();\n\n    return jsonResponse({\n      success: true,\n      users: devUsers.results,\n      dev_mode: true,\n    });\n\n  } catch (error) {\n    console.error('Dev users error:', error);\n    return jsonResponse({\n      success: false,\n      error: 'Failed to fetch development users',\n    }, 500);\n  }\n}\n\n/**\n * Main request handler\n */\nexport async function onRequest(context: any): Promise<Response> {\n  const { request, env } = context;\n  const url = new URL(request.url);\n  const method = request.method;\n\n  // Handle CORS preflight\n  if (method === 'OPTIONS') {\n    return handleCORS();\n  }\n\n  // Route requests\n  if (method === 'POST' && url.pathname.endsWith('/login')) {\n    return handleLogin(request, env);\n  }\n\n  if (method === 'POST' && url.pathname.endsWith('/logout')) {\n    return handleLogout(request, env);\n  }\n\n  if (method === 'POST' && url.pathname.endsWith('/refresh')) {\n    return handleRefresh(request, env);\n  }\n\n  if (method === 'GET' && url.pathname.endsWith('/me')) {\n    return handleMe(request, env);\n  }\n\n  if (method === 'GET' && url.pathname.endsWith('/dev-users')) {\n    return handleDevUsers(request, env);\n  }\n\n  // Default response\n  return jsonResponse({\n    success: false,\n    error: 'Endpoint not found',\n    available_endpoints: {\n      'POST /api/auth/login': 'User login',\n      'POST /api/auth/logout': 'User logout',\n      'POST /api/auth/refresh': 'Refresh access token',\n      'GET /api/auth/me': 'Get current user',\n      'GET /api/auth/dev-users': 'Get development users (dev mode only)',\n    },\n  }, 404);\n}\n", "/**\r\n * Environment Information API\r\n * Returns current environment configuration (dev mode only)\r\n */\r\n\r\ninterface Env {\r\n  ENVIRONMENT: string;\r\n  DEV_MODE: string;\r\n  AUTH_ENABLED: string;\r\n  DEV_USERS_ENABLED: string;\r\n  APP_NAME: string;\r\n  CONTACT_EMAIL: string;\r\n  WHATSAPP_NUMBER: string;\r\n}\r\n\r\n// CORS headers for all responses\r\nconst corsHeaders = {\r\n  'Access-Control-Allow-Origin': '*',\r\n  'Access-Control-Allow-Methods': 'GET, OPTIONS',\r\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n};\r\n\r\n/**\r\n * Handle CORS preflight requests\r\n */\r\nfunction handleCORS(): Response {\r\n  return new Response(null, {\r\n    status: 200,\r\n    headers: corsHeaders,\r\n  });\r\n}\r\n\r\n/**\r\n * Create JSON response with CORS headers\r\n */\r\nfunction jsonResponse(data: any, status: number = 200): Response {\r\n  return new Response(JSON.stringify(data), {\r\n    status,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...corsHeaders,\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * Get environment information\r\n */\r\nasync function handleEnvInfo(request: Request, env: Env): Promise<Response> {\r\n  const isDev = env.DEV_MODE === 'true';\r\n\r\n  // Only allow in development mode\r\n  if (!isDev) {\r\n    return jsonResponse({\r\n      success: false,\r\n      error: 'Environment information not available in production',\r\n    }, 403);\r\n  }\r\n\r\n  try {\r\n    const envInfo = {\r\n      success: true,\r\n      environment: env.ENVIRONMENT || 'unknown',\r\n      devMode: env.DEV_MODE === 'true',\r\n      authEnabled: env.AUTH_ENABLED === 'true',\r\n      devUsersEnabled: env.DEV_USERS_ENABLED === 'true',\r\n      databaseName: 'akiraxtkd-db-dev', // From wrangler.toml\r\n      appInfo: {\r\n        name: env.APP_NAME || 'Akira X Taekwondo',\r\n        contact: env.CONTACT_EMAIL || '',\r\n        whatsapp: env.WHATSAPP_NUMBER || '',\r\n      },\r\n      timestamp: new Date().toISOString(),\r\n      buildInfo: {\r\n        version: '1.0.0-dev',\r\n        node_env: 'development',\r\n        platform: 'cloudflare-workers',\r\n      },\r\n    };\r\n\r\n    return jsonResponse(envInfo);\r\n\r\n  } catch (error) {\r\n    console.error('Environment info error:', error);\r\n    return jsonResponse({\r\n      success: false,\r\n      error: 'Failed to retrieve environment information',\r\n    }, 500);\r\n  }\r\n}\r\n\r\n/**\r\n * Main request handler\r\n */\r\nexport async function onRequest(context: any): Promise<Response> {\r\n  const { request, env } = context;\r\n  const method = request.method;\r\n\r\n  // Handle CORS preflight\r\n  if (method === 'OPTIONS') {\r\n    return handleCORS();\r\n  }\r\n\r\n  // Only allow GET requests\r\n  if (method !== 'GET') {\r\n    return jsonResponse({\r\n      success: false,\r\n      error: 'Method not allowed',\r\n    }, 405);\r\n  }\r\n\r\n  return handleEnvInfo(request, env);\r\n}\r\n", "/**\n * Dashboard API - Real database data for all dashboard views\n */\n\nimport { Env } from '../types';\nimport { requireAuth } from '../lib/jwt';\n\ninterface DashboardStats {\n  totalStudents: number;\n  activeClasses: number;\n  monthlyRevenue: number;\n  attendanceRate: number;\n  newEnrollments: number;\n  upcomingGradings: number;\n}\n\ninterface StudentProfile {\n  student_id: string;\n  student_code: string;\n  legal_name: string;\n  display_name: string;\n  date_of_birth: string;\n  gender: string;\n  phone?: string;\n  email?: string;\n  current_belt?: string;\n  belt_color?: string;\n  attendance_rate?: number;\n  last_attended?: string;\n  next_grading?: string;\n  created_at: string;\n}\n\ninterface ClassInfo {\n  class_id: string;\n  name: string;\n  program_name: string;\n  venue_name: string;\n  coach_name: string;\n  day_of_week: number;\n  start_time: string;\n  end_time: string;\n  capacity: number;\n  enrolled_count: number;\n  status: string;\n}\n\ninterface SessionInfo {\n  session_id: string;\n  class_id: string;\n  class_name: string;\n  session_date: string;\n  planned_start_time: string;\n  planned_end_time: string;\n  venue_name: string;\n  coach_name: string;\n  status: string;\n  enrolled_students: number;\n  attendance_taken: boolean;\n}\n\ninterface RecentActivity {\n  id: string;\n  type: string;\n  message: string;\n  timestamp: string;\n  status: string;\n}\n\n/**\n * Get dashboard statistics for admin\n */\nasync function getAdminStats(db: D1Database): Promise<DashboardStats> {\n  try {\n    // Get total students\n    const totalStudentsResult = await db\n      .prepare('SELECT COUNT(*) as count FROM student_profiles WHERE created_at IS NOT NULL')\n      .first<{ count: number }>();\n\n    // Get active classes\n    const activeClassesResult = await db\n      .prepare('SELECT COUNT(*) as count FROM classes WHERE status = ?')\n      .bind('ongoing')\n      .first<{ count: number }>();\n\n    // Get new enrollments this month\n    const newEnrollmentsResult = await db\n      .prepare(`\n        SELECT COUNT(*) as count \n        FROM enrollments \n        WHERE status = 'active' \n        AND datetime(created_at) >= datetime('now', '-1 month')\n      `)\n      .first<{ count: number }>();\n\n    // Calculate attendance rate\n    const attendanceResult = await db\n      .prepare(`\n        SELECT \n          COUNT(CASE WHEN status = 'present' THEN 1 END) as present_count,\n          COUNT(*) as total_count\n        FROM attendance \n        WHERE datetime(created_at) >= datetime('now', '-1 month')\n      `)\n      .first<{ present_count: number; total_count: number }>();\n\n    const attendanceRate = attendanceResult?.total_count > 0 \n      ? Math.round((attendanceResult.present_count / attendanceResult.total_count) * 100)\n      : 0;\n\n    // Get upcoming gradings (students ready for next belt)\n    const upcomingGradingsResult = await db\n      .prepare(`\n        SELECT COUNT(DISTINCT sp.student_id) as count\n        FROM student_profiles sp\n        LEFT JOIN student_rank_history srh ON sp.student_id = srh.student_id\n        WHERE sp.created_at IS NOT NULL\n      `)\n      .first<{ count: number }>();\n\n    return {\n      totalStudents: totalStudentsResult?.count || 0,\n      activeClasses: activeClassesResult?.count || 0,\n      monthlyRevenue: 12500, // TODO: Calculate from invoices/payments\n      attendanceRate,\n      newEnrollments: newEnrollmentsResult?.count || 0,\n      upcomingGradings: Math.min(upcomingGradingsResult?.count || 0, 15)\n    };\n  } catch (error) {\n    console.error('Error getting admin stats:', error);\n    return {\n      totalStudents: 0,\n      activeClasses: 0,\n      monthlyRevenue: 0,\n      attendanceRate: 0,\n      newEnrollments: 0,\n      upcomingGradings: 0\n    };\n  }\n}\n\n/**\n * Get dashboard statistics for coach\n */\nasync function getCoachStats(db: D1Database, coachId: string) {\n  try {\n    // Get coach's students\n    const studentsResult = await db\n      .prepare(`\n        SELECT COUNT(DISTINCT e.student_id) as count\n        FROM enrollments e\n        JOIN classes c ON e.class_id = c.class_id\n        WHERE c.coach_id = ? AND e.status = 'active'\n      `)\n      .bind(coachId)\n      .first<{ count: number }>();\n\n    // Get coach's active classes\n    const classesResult = await db\n      .prepare('SELECT COUNT(*) as count FROM classes WHERE coach_id = ? AND status = ?')\n      .bind(coachId, 'ongoing')\n      .first<{ count: number }>();\n\n    // Get today's sessions\n    const todaySessionsResult = await db\n      .prepare(`\n        SELECT COUNT(*) as count\n        FROM sessions s\n        JOIN classes c ON s.class_id = c.class_id\n        WHERE c.coach_id = ? \n        AND DATE(s.session_date) = DATE('now')\n        AND s.status != 'cancelled'\n      `)\n      .bind(coachId)\n      .first<{ count: number }>();\n\n    // Calculate attendance rate for coach's classes\n    const attendanceResult = await db\n      .prepare(`\n        SELECT \n          COUNT(CASE WHEN a.status = 'present' THEN 1 END) as present_count,\n          COUNT(*) as total_count\n        FROM attendance a\n        JOIN sessions s ON a.session_id = s.session_id\n        JOIN classes c ON s.class_id = c.class_id\n        WHERE c.coach_id = ?\n        AND datetime(a.created_at) >= datetime('now', '-1 month')\n      `)\n      .bind(coachId)\n      .first<{ present_count: number; total_count: number }>();\n\n    const attendanceRate = attendanceResult?.total_count > 0 \n      ? Math.round((attendanceResult.present_count / attendanceResult.total_count) * 100)\n      : 0;\n\n    return {\n      totalStudents: studentsResult?.count || 0,\n      activeClasses: classesResult?.count || 0,\n      todaysSessions: todaySessionsResult?.count || 0,\n      attendanceRate,\n      upcomingGradings: 8 // TODO: Calculate based on student progress\n    };\n  } catch (error) {\n    console.error('Error getting coach stats:', error);\n    return {\n      totalStudents: 0,\n      activeClasses: 0,\n      todaysSessions: 0,\n      attendanceRate: 0,\n      upcomingGradings: 0\n    };\n  }\n}\n\n/**\n * Get dashboard statistics for student\n */\nasync function getStudentStats(db: D1Database, studentId: string) {\n  try {\n    // Get student's current belt\n    const studentResult = await db\n      .prepare(`\n        SELECT sp.*, \n               r.name_en as current_belt,\n               r.color as belt_color\n        FROM student_profiles sp\n        LEFT JOIN student_rank_history srh ON sp.student_id = srh.student_id\n        LEFT JOIN ranks r ON srh.rank_id = r.rank_id\n        WHERE sp.student_id = ?\n        ORDER BY srh.granted_on DESC\n        LIMIT 1\n      `)\n      .bind(studentId)\n      .first<any>();\n\n    // Get classes attended this month\n    const attendanceResult = await db\n      .prepare(`\n        SELECT COUNT(*) as count\n        FROM attendance a\n        JOIN sessions s ON a.session_id = s.session_id\n        WHERE a.student_id = ?\n        AND a.status = 'present'\n        AND datetime(s.session_date) >= datetime('now', '-1 month')\n      `)\n      .bind(studentId)\n      .first<{ count: number }>();\n\n    // Calculate attendance rate\n    const totalSessionsResult = await db\n      .prepare(`\n        SELECT COUNT(*) as count\n        FROM attendance a\n        JOIN sessions s ON a.session_id = s.session_id\n        WHERE a.student_id = ?\n        AND datetime(s.session_date) >= datetime('now', '-1 month')\n      `)\n      .bind(studentId)\n      .first<{ count: number }>();\n\n    const attendanceRate = totalSessionsResult?.count > 0 \n      ? Math.round((attendanceResult?.count || 0) / totalSessionsResult.count * 100)\n      : 0;\n\n    return {\n      currentBelt: studentResult?.current_belt || 'White Belt',\n      beltColor: studentResult?.belt_color || 'white',\n      classesAttended: attendanceResult?.count || 0,\n      attendanceRate,\n      nextGrading: 'January 15, 2025', // TODO: Calculate based on requirements\n      daysUntilGrading: 23\n    };\n  } catch (error) {\n    console.error('Error getting student stats:', error);\n    return {\n      currentBelt: 'White Belt',\n      beltColor: 'white',\n      classesAttended: 0,\n      attendanceRate: 0,\n      nextGrading: 'TBD',\n      daysUntilGrading: 0\n    };\n  }\n}\n\n/**\n * Get all students for admin dashboard\n */\nasync function getAllStudents(db: D1Database) {\n  try {\n    const students = await db\n      .prepare(`\n        SELECT \n          sp.*,\n          r.name_en as current_belt,\n          r.color as belt_color,\n          COUNT(CASE WHEN a.status = 'present' THEN 1 END) * 100.0 / NULLIF(COUNT(a.attendance_id), 0) as attendance_rate,\n          MAX(s.session_date) as last_attended\n        FROM student_profiles sp\n        LEFT JOIN student_rank_history srh ON sp.student_id = srh.student_id\n        LEFT JOIN ranks r ON srh.rank_id = r.rank_id\n        LEFT JOIN attendance a ON sp.student_id = a.student_id\n        LEFT JOIN sessions s ON a.session_id = s.session_id\n        WHERE sp.created_at IS NOT NULL\n        GROUP BY sp.student_id\n        ORDER BY sp.created_at DESC\n      `)\n      .all();\n\n    return students.results || [];\n  } catch (error) {\n    console.error('Error getting all students:', error);\n    return [];\n  }\n}\n\n/**\n * Get coach's students\n */\nasync function getCoachStudents(db: D1Database, coachId: string) {\n  try {\n    const students = await db\n      .prepare(`\n        SELECT DISTINCT\n          sp.*,\n          r.name_en as current_belt,\n          r.color as belt_color,\n          COUNT(CASE WHEN a.status = 'present' THEN 1 END) * 100.0 / NULLIF(COUNT(a.attendance_id), 0) as attendance_rate,\n          MAX(s.session_date) as last_attended\n        FROM student_profiles sp\n        JOIN enrollments e ON sp.student_id = e.student_id\n        JOIN classes c ON e.class_id = c.class_id\n        LEFT JOIN student_rank_history srh ON sp.student_id = srh.student_id\n        LEFT JOIN ranks r ON srh.rank_id = r.rank_id\n        LEFT JOIN attendance a ON sp.student_id = a.student_id\n        LEFT JOIN sessions s ON a.session_id = s.session_id\n        WHERE c.coach_id = ? AND e.status = 'active'\n        GROUP BY sp.student_id\n        ORDER BY sp.legal_name\n      `)\n      .bind(coachId)\n      .all();\n\n    return students.results || [];\n  } catch (error) {\n    console.error('Error getting coach students:', error);\n    return [];\n  }\n}\n\n/**\n * Get today's sessions for coach\n */\nasync function getTodaySessions(db: D1Database, coachId: string) {\n  try {\n    const sessions = await db\n      .prepare(`\n        SELECT \n          s.*,\n          c.name as class_name,\n          v.name as venue_name,\n          cp.display_name as coach_name,\n          COUNT(e.student_id) as enrolled_students,\n          CASE \n            WHEN COUNT(a.attendance_id) > 0 THEN 'completed'\n            WHEN datetime('now') > datetime(s.session_date || ' ' || s.planned_end_time) THEN 'completed'\n            ELSE 'pending'\n          END as attendance_status\n        FROM sessions s\n        JOIN classes c ON s.class_id = c.class_id\n        JOIN venues v ON c.venue_id = v.venue_id\n        JOIN coach_profiles cp ON c.coach_id = cp.coach_id\n        LEFT JOIN enrollments e ON c.class_id = e.class_id AND e.status = 'active'\n        LEFT JOIN attendance a ON s.session_id = a.session_id\n        WHERE c.coach_id = ?\n        AND DATE(s.session_date) = DATE('now')\n        AND s.status != 'cancelled'\n        GROUP BY s.session_id\n        ORDER BY s.planned_start_time\n      `)\n      .bind(coachId)\n      .all();\n\n    return sessions.results || [];\n  } catch (error) {\n    console.error('Error getting today sessions:', error);\n    return [];\n  }\n}\n\n/**\n * Get student's classes\n */\nasync function getStudentClasses(db: D1Database, studentId: string) {\n  try {\n    const classes = await db\n      .prepare(`\n        SELECT \n          c.*,\n          p.name as program_name,\n          v.name as venue_name,\n          cp.display_name as coach_name,\n          e.status as enrollment_status,\n          CASE c.day_of_week\n            WHEN 0 THEN 'Sunday'\n            WHEN 1 THEN 'Monday'\n            WHEN 2 THEN 'Tuesday'\n            WHEN 3 THEN 'Wednesday'\n            WHEN 4 THEN 'Thursday'\n            WHEN 5 THEN 'Friday'\n            WHEN 6 THEN 'Saturday'\n          END as day_name\n        FROM classes c\n        JOIN enrollments e ON c.class_id = e.class_id\n        JOIN programs p ON c.program_id = p.program_id\n        JOIN venues v ON c.venue_id = v.venue_id\n        JOIN coach_profiles cp ON c.coach_id = cp.coach_id\n        WHERE e.student_id = ? AND e.status IN ('active', 'waitlist')\n        ORDER BY c.day_of_week, c.start_time\n      `)\n      .bind(studentId)\n      .all();\n\n    return classes.results || [];\n  } catch (error) {\n    console.error('Error getting student classes:', error);\n    return [];\n  }\n}\n\n/**\n * Get recent activities for admin dashboard\n */\nasync function getRecentActivities(db: D1Database) {\n  try {\n    const activities: RecentActivity[] = [];\n\n    // Get recent enrollments\n    const enrollments = await db\n      .prepare(`\n        SELECT \n          e.enrollment_id as id,\n          'enrollment' as type,\n          sp.legal_name || ' enrolled in ' || c.name as message,\n          e.created_at as timestamp,\n          'success' as status\n        FROM enrollments e\n        JOIN student_profiles sp ON e.student_id = sp.student_id\n        JOIN classes c ON e.class_id = c.class_id\n        WHERE datetime(e.created_at) >= datetime('now', '-7 days')\n        ORDER BY e.created_at DESC\n        LIMIT 5\n      `)\n      .all();\n\n    activities.push(...(enrollments.results || []).map((item: any) => ({\n      ...item,\n      timestamp: formatTimeAgo(item.timestamp)\n    })));\n\n    return activities.slice(0, 10);\n  } catch (error) {\n    console.error('Error getting recent activities:', error);\n    return [];\n  }\n}\n\n/**\n * Format timestamp to \"X minutes ago\" format\n */\nfunction formatTimeAgo(timestamp: string): string {\n  const now = new Date();\n  const then = new Date(timestamp);\n  const diffMs = now.getTime() - then.getTime();\n  const diffMins = Math.floor(diffMs / (1000 * 60));\n  const diffHours = Math.floor(diffMins / 60);\n  const diffDays = Math.floor(diffHours / 24);\n\n  if (diffMins < 1) return 'Just now';\n  if (diffMins < 60) return `${diffMins} minutes ago`;\n  if (diffHours < 24) return `${diffHours} hours ago`;\n  if (diffDays < 7) return `${diffDays} days ago`;\n  return then.toLocaleDateString();\n}\n\n/**\n * Handle dashboard API requests\n */\nexport async function onRequest(context: any): Promise<Response> {\n  const { request, env } = context;\n  const url = new URL(request.url);\n  const path = url.pathname.replace('/api/dashboard', '');\n  \n  // CORS headers\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  };\n\n  if (request.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    // Authenticate user using JWT\n    let currentUser = null;\n    \n    try {\n      currentUser = await requireAuth(request, env);\n    } catch (authError) {\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Authentication required'\n      }), {\n        status: 401,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n    }\n\n    const response = await handleDashboardRequest(path, request.method, env.DB, currentUser);\n    \n    return new Response(JSON.stringify(response), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    console.error('Dashboard API error:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Internal server error'\n    }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n/**\n * Route dashboard requests\n */\nasync function handleDashboardRequest(path: string, method: string, db: D1Database, user: any) {\n  const [, role, action] = path.split('/');\n\n  if (method === 'GET') {\n    switch (`${role}/${action}`) {\n      case 'admin/stats':\n        if (user.role !== 'admin') throw new Error('Unauthorized');\n        const adminStats = await getAdminStats(db);\n        return { success: true, data: adminStats };\n\n      case 'admin/students':\n        if (user.role !== 'admin') throw new Error('Unauthorized');\n        const allStudents = await getAllStudents(db);\n        return { success: true, data: allStudents };\n\n      case 'admin/activities':\n        if (user.role !== 'admin') throw new Error('Unauthorized');\n        const activities = await getRecentActivities(db);\n        return { success: true, data: activities };\n\n      case 'coach/stats':\n        if (user.role !== 'coach') throw new Error('Unauthorized');\n        const coachStats = await getCoachStats(db, user.user_id);\n        return { success: true, data: coachStats };\n\n      case 'coach/students':\n        if (user.role !== 'coach') throw new Error('Unauthorized');\n        const coachStudents = await getCoachStudents(db, user.user_id);\n        return { success: true, data: coachStudents };\n\n      case 'coach/sessions':\n        if (user.role !== 'coach') throw new Error('Unauthorized');\n        const todaySessions = await getTodaySessions(db, user.user_id);\n        return { success: true, data: todaySessions };\n\n      case 'student/stats':\n        if (user.role !== 'student') throw new Error('Unauthorized');\n        const studentStats = await getStudentStats(db, user.user_id);\n        return { success: true, data: studentStats };\n\n      case 'student/classes':\n        if (user.role !== 'student') throw new Error('Unauthorized');\n        const studentClasses = await getStudentClasses(db, user.user_id);\n        return { success: true, data: studentClasses };\n\n      default:\n        throw new Error('Not found');\n    }\n  }\n\n  throw new Error('Method not allowed');\n}\n", "// Cloudflare Worker Function for Students API\r\n// /api/students endpoint\r\n\r\nimport { Env, Student, CreateStudentRequest, UpdateStudentRequest, ApiResponse, PaginatedResponse, QueryOptions } from '../../types/database';\r\nimport { requireAuth } from '../lib/jwt';\r\n\r\ninterface RequestContext {\r\n  request: Request;\r\n  env: Env;\r\n  params?: { id?: string };\r\n}\r\n\r\n// Generate student code\r\nfunction generateStudentCode(): string {\r\n  const year = new Date().getFullYear();\r\n  const randomNum = Math.floor(Math.random() * 999) + 1;\r\n  return `AXT${year}${randomNum.toString().padStart(3, '0')}`;\r\n}\r\n\r\n// Validate student data\r\nfunction validateStudentData(data: any): { isValid: boolean; errors: string[] } {\r\n  const errors: string[] = [];\r\n  \r\n  if (!data.first_name || data.first_name.trim().length === 0) {\r\n    errors.push('First name is required');\r\n  }\r\n  \r\n  if (!data.last_name || data.last_name.trim().length === 0) {\r\n    errors.push('Last name is required');\r\n  }\r\n  \r\n  if (!data.date_of_birth) {\r\n    errors.push('Date of birth is required');\r\n  } else {\r\n    const birthDate = new Date(data.date_of_birth);\r\n    const today = new Date();\r\n    if (birthDate > today) {\r\n      errors.push('Date of birth cannot be in the future');\r\n    }\r\n  }\r\n  \r\n  if (!data.gender || !['Male', 'Female', 'Other'].includes(data.gender)) {\r\n    errors.push('Valid gender is required');\r\n  }\r\n  \r\n  if (data.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(data.email)) {\r\n    errors.push('Invalid email format');\r\n  }\r\n  \r\n  return { isValid: errors.length === 0, errors };\r\n}\r\n\r\n// Build WHERE clause for filtering\r\nfunction buildWhereClause(filters: any): { where: string; params: any[] } {\r\n  const conditions: string[] = [];\r\n  const params: any[] = [];\r\n  let paramIndex = 1;\r\n  \r\n  if (filters.status) {\r\n    if (Array.isArray(filters.status)) {\r\n      const placeholders = filters.status.map(() => `?${paramIndex++}`).join(',');\r\n      conditions.push(`status IN (${placeholders})`);\r\n      params.push(...filters.status);\r\n    } else {\r\n      conditions.push(`status = ?${paramIndex++}`);\r\n      params.push(filters.status);\r\n    }\r\n  }\r\n  \r\n  if (filters.gender) {\r\n    if (Array.isArray(filters.gender)) {\r\n      const placeholders = filters.gender.map(() => `?${paramIndex++}`).join(',');\r\n      conditions.push(`gender IN (${placeholders})`);\r\n      params.push(...filters.gender);\r\n    } else {\r\n      conditions.push(`gender = ?${paramIndex++}`);\r\n      params.push(filters.gender);\r\n    }\r\n  }\r\n  \r\n  if (filters.search) {\r\n    conditions.push(`(first_name LIKE ?${paramIndex} OR last_name LIKE ?${paramIndex + 1} OR email LIKE ?${paramIndex + 2})`);\r\n    const searchTerm = `%${filters.search}%`;\r\n    params.push(searchTerm, searchTerm, searchTerm);\r\n    paramIndex += 3;\r\n  }\r\n  \r\n  if (filters.date_from) {\r\n    conditions.push(`joined_date >= ?${paramIndex++}`);\r\n    params.push(filters.date_from);\r\n  }\r\n  \r\n  if (filters.date_to) {\r\n    conditions.push(`joined_date <= ?${paramIndex++}`);\r\n    params.push(filters.date_to);\r\n  }\r\n  \r\n  const where = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '';\r\n  return { where, params };\r\n}\r\n\r\n// GET /api/students - List all students with pagination and filtering\r\nasync function getStudents(context: RequestContext): Promise<Response> {\r\n  try {\r\n    const url = new URL(context.request.url);\r\n    const page = parseInt(url.searchParams.get('page') || '1');\r\n    const limit = Math.min(parseInt(url.searchParams.get('limit') || '10'), 100);\r\n    const offset = (page - 1) * limit;\r\n    \r\n    // Parse filters\r\n    const filters = {\r\n      status: url.searchParams.get('status'),\r\n      gender: url.searchParams.get('gender'),\r\n      search: url.searchParams.get('search'),\r\n      date_from: url.searchParams.get('date_from'),\r\n      date_to: url.searchParams.get('date_to'),\r\n    };\r\n    \r\n    // Parse sorting\r\n    const sortField = url.searchParams.get('sort_field') || 'created_at';\r\n    const sortOrder = url.searchParams.get('sort_order') || 'DESC';\r\n    \r\n    // Build query\r\n    const { where, params } = buildWhereClause(filters);\r\n    \r\n    // Get total count\r\n    const countQuery = `SELECT COUNT(*) as total FROM students ${where}`;\r\n    const countResult = await context.env.DB.prepare(countQuery).bind(...params).first();\r\n    const total = countResult?.total || 0;\r\n    \r\n    // Get students with current belt information\r\n    const studentsQuery = `\r\n      SELECT \r\n        s.*,\r\n        bl.belt_name,\r\n        bl.belt_color,\r\n        bl.level_order\r\n      FROM students s\r\n      LEFT JOIN (\r\n        SELECT \r\n          sbh.student_id,\r\n          sbh.belt_level_id,\r\n          ROW_NUMBER() OVER (PARTITION BY sbh.student_id ORDER BY sbh.achieved_date DESC) as rn\r\n        FROM student_belt_history sbh\r\n      ) latest_belt ON s.id = latest_belt.student_id AND latest_belt.rn = 1\r\n      LEFT JOIN belt_levels bl ON latest_belt.belt_level_id = bl.id\r\n      ${where}\r\n      ORDER BY ${sortField} ${sortOrder}\r\n      LIMIT ?${params.length + 1} OFFSET ?${params.length + 2}\r\n    `;\r\n    \r\n    const studentsResult = await context.env.DB.prepare(studentsQuery)\r\n      .bind(...params, limit, offset)\r\n      .all();\r\n    \r\n    const students = studentsResult.results.map((row: any) => ({\r\n      id: row.id,\r\n      student_code: row.student_code,\r\n      first_name: row.first_name,\r\n      last_name: row.last_name,\r\n      full_name: row.full_name,\r\n      date_of_birth: row.date_of_birth,\r\n      gender: row.gender,\r\n      phone: row.phone,\r\n      email: row.email,\r\n      joined_date: row.joined_date,\r\n      status: row.status,\r\n      created_at: row.created_at,\r\n      updated_at: row.updated_at,\r\n      current_belt: row.belt_name ? {\r\n        belt_name: row.belt_name,\r\n        belt_color: row.belt_color,\r\n        level_order: row.level_order\r\n      } : null\r\n    }));\r\n    \r\n    const response: PaginatedResponse<Student> = {\r\n      data: students,\r\n      pagination: {\r\n        page,\r\n        limit,\r\n        total,\r\n        total_pages: Math.ceil(total / limit),\r\n        has_next: offset + limit < total,\r\n        has_prev: page > 1\r\n      }\r\n    };\r\n    \r\n    return new Response(JSON.stringify({ success: true, ...response }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error fetching students:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'INTERNAL_ERROR',\r\n      message: 'Failed to fetch students'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\n// POST /api/students - Create new student\r\nasync function createStudent(context: RequestContext): Promise<Response> {\r\n  try {\r\n    const data: CreateStudentRequest = await context.request.json();\r\n    \r\n    // Validate data\r\n    const validation = validateStudentData(data);\r\n    if (!validation.isValid) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'VALIDATION_ERROR',\r\n        message: 'Invalid student data',\r\n        details: { field_errors: validation.errors }\r\n      }), {\r\n        status: 422,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Generate unique student code\r\n    let studentCode = generateStudentCode();\r\n    let attempts = 0;\r\n    while (attempts < 10) {\r\n      const existing = await context.env.DB.prepare(\r\n        'SELECT id FROM students WHERE student_code = ?'\r\n      ).bind(studentCode).first();\r\n      \r\n      if (!existing) break;\r\n      studentCode = generateStudentCode();\r\n      attempts++;\r\n    }\r\n    \r\n    if (attempts >= 10) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'GENERATION_ERROR',\r\n        message: 'Failed to generate unique student code'\r\n      }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Insert new student\r\n    const insertQuery = `\r\n      INSERT INTO students (\r\n        student_code, first_name, last_name, date_of_birth, gender,\r\n        phone, email, emergency_contact_name, emergency_contact_phone,\r\n        emergency_contact_relationship, address, postal_code, joined_date, notes\r\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n    `;\r\n    \r\n    const joinedDate = new Date().toISOString().split('T')[0];\r\n    const result = await context.env.DB.prepare(insertQuery).bind(\r\n      studentCode,\r\n      data.first_name,\r\n      data.last_name,\r\n      data.date_of_birth,\r\n      data.gender,\r\n      data.phone || null,\r\n      data.email || null,\r\n      data.emergency_contact_name || null,\r\n      data.emergency_contact_phone || null,\r\n      data.emergency_contact_relationship || null,\r\n      data.address || null,\r\n      data.postal_code || null,\r\n      joinedDate,\r\n      data.notes || null\r\n    ).run();\r\n    \r\n    if (!result.success) {\r\n      throw new Error('Failed to insert student');\r\n    }\r\n    \r\n    // Fetch the created student\r\n    const newStudent = await context.env.DB.prepare(\r\n      'SELECT * FROM students WHERE id = ?'\r\n    ).bind(result.meta.last_row_id).first();\r\n    \r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      data: newStudent,\r\n      message: 'Student created successfully'\r\n    }), {\r\n      status: 201,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error creating student:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'INTERNAL_ERROR',\r\n      message: 'Failed to create student'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\n// GET /api/students/{id} - Get specific student\r\nasync function getStudent(context: RequestContext): Promise<Response> {\r\n  try {\r\n    const studentId = context.params?.id;\r\n    if (!studentId || isNaN(parseInt(studentId))) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'INVALID_ID',\r\n        message: 'Valid student ID is required'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Get student with current belt and belt history\r\n    const studentQuery = `\r\n      SELECT \r\n        s.*,\r\n        bl.belt_name as current_belt_name,\r\n        bl.belt_color as current_belt_color,\r\n        bl.level_order as current_belt_order\r\n      FROM students s\r\n      LEFT JOIN (\r\n        SELECT \r\n          sbh.student_id,\r\n          sbh.belt_level_id,\r\n          ROW_NUMBER() OVER (PARTITION BY sbh.student_id ORDER BY sbh.achieved_date DESC) as rn\r\n        FROM student_belt_history sbh\r\n      ) latest_belt ON s.id = latest_belt.student_id AND latest_belt.rn = 1\r\n      LEFT JOIN belt_levels bl ON latest_belt.belt_level_id = bl.id\r\n      WHERE s.id = ?\r\n    `;\r\n    \r\n    const student = await context.env.DB.prepare(studentQuery).bind(studentId).first();\r\n    \r\n    if (!student) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'NOT_FOUND',\r\n        message: 'Student not found'\r\n      }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Get belt history\r\n    const beltHistoryQuery = `\r\n      SELECT \r\n        sbh.*,\r\n        bl.belt_name,\r\n        bl.belt_color,\r\n        bl.level_order\r\n      FROM student_belt_history sbh\r\n      LEFT JOIN belt_levels bl ON sbh.belt_level_id = bl.id\r\n      WHERE sbh.student_id = ?\r\n      ORDER BY sbh.achieved_date DESC\r\n    `;\r\n    \r\n    const beltHistory = await context.env.DB.prepare(beltHistoryQuery).bind(studentId).all();\r\n    \r\n    const studentWithDetails = {\r\n      ...student,\r\n      current_belt: student.current_belt_name ? {\r\n        belt_name: student.current_belt_name,\r\n        belt_color: student.current_belt_color,\r\n        level_order: student.current_belt_order\r\n      } : null,\r\n      belt_history: beltHistory.results\r\n    };\r\n    \r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      data: studentWithDetails\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error fetching student:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'INTERNAL_ERROR',\r\n      message: 'Failed to fetch student'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\n// PUT /api/students/{id} - Update student\r\nasync function updateStudent(context: RequestContext): Promise<Response> {\r\n  try {\r\n    const studentId = context.params?.id;\r\n    if (!studentId || isNaN(parseInt(studentId))) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'INVALID_ID',\r\n        message: 'Valid student ID is required'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const data: UpdateStudentRequest = await context.request.json();\r\n    \r\n    // Validate data if provided\r\n    if (Object.keys(data).length > 0) {\r\n      const validation = validateStudentData({ ...data, first_name: data.first_name || 'dummy', last_name: data.last_name || 'dummy', date_of_birth: data.date_of_birth || '2000-01-01', gender: data.gender || 'Male' });\r\n      if (!validation.isValid && (data.first_name || data.last_name || data.date_of_birth || data.gender || data.email)) {\r\n        return new Response(JSON.stringify({\r\n          success: false,\r\n          error: 'VALIDATION_ERROR',\r\n          message: 'Invalid student data',\r\n          details: { field_errors: validation.errors }\r\n        }), {\r\n          status: 422,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Check if student exists\r\n    const existing = await context.env.DB.prepare('SELECT id FROM students WHERE id = ?').bind(studentId).first();\r\n    if (!existing) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'NOT_FOUND',\r\n        message: 'Student not found'\r\n      }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Build update query\r\n    const updateFields: string[] = [];\r\n    const updateValues: any[] = [];\r\n    \r\n    if (data.first_name !== undefined) {\r\n      updateFields.push('first_name = ?');\r\n      updateValues.push(data.first_name);\r\n    }\r\n    if (data.last_name !== undefined) {\r\n      updateFields.push('last_name = ?');\r\n      updateValues.push(data.last_name);\r\n    }\r\n    if (data.date_of_birth !== undefined) {\r\n      updateFields.push('date_of_birth = ?');\r\n      updateValues.push(data.date_of_birth);\r\n    }\r\n    if (data.gender !== undefined) {\r\n      updateFields.push('gender = ?');\r\n      updateValues.push(data.gender);\r\n    }\r\n    if (data.phone !== undefined) {\r\n      updateFields.push('phone = ?');\r\n      updateValues.push(data.phone);\r\n    }\r\n    if (data.email !== undefined) {\r\n      updateFields.push('email = ?');\r\n      updateValues.push(data.email);\r\n    }\r\n    if (data.status !== undefined) {\r\n      updateFields.push('status = ?');\r\n      updateValues.push(data.status);\r\n    }\r\n    \r\n    if (updateFields.length === 0) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'NO_UPDATES',\r\n        message: 'No fields to update'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    updateFields.push('updated_at = CURRENT_TIMESTAMP');\r\n    updateValues.push(studentId);\r\n    \r\n    const updateQuery = `UPDATE students SET ${updateFields.join(', ')} WHERE id = ?`;\r\n    await context.env.DB.prepare(updateQuery).bind(...updateValues).run();\r\n    \r\n    // Fetch updated student\r\n    const updatedStudent = await context.env.DB.prepare('SELECT * FROM students WHERE id = ?').bind(studentId).first();\r\n    \r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      data: updatedStudent,\r\n      message: 'Student updated successfully'\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error updating student:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'INTERNAL_ERROR',\r\n      message: 'Failed to update student'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\n// DELETE /api/students/{id} - Soft delete student\r\nasync function deleteStudent(context: RequestContext): Promise<Response> {\r\n  try {\r\n    const studentId = context.params?.id;\r\n    if (!studentId || isNaN(parseInt(studentId))) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'INVALID_ID',\r\n        message: 'Valid student ID is required'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Check if student exists\r\n    const existing = await context.env.DB.prepare('SELECT id FROM students WHERE id = ?').bind(studentId).first();\r\n    if (!existing) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'NOT_FOUND',\r\n        message: 'Student not found'\r\n      }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Soft delete (mark as inactive)\r\n    await context.env.DB.prepare(\r\n      'UPDATE students SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?'\r\n    ).bind('Inactive', studentId).run();\r\n    \r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      message: 'Student deleted successfully'\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error deleting student:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'INTERNAL_ERROR',\r\n      message: 'Failed to delete student'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\n// Main handler function\r\nexport async function onRequest(context: any): Promise<Response> {\r\n  const { request, env, params } = context;\r\n  \r\n  // CORS headers\r\n  const corsHeaders = {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n  };\r\n  \r\n  // Handle preflight OPTIONS request\r\n  if (request.method === 'OPTIONS') {\r\n    return new Response(null, { headers: corsHeaders });\r\n  }\r\n  \r\n  try {\r\n    // \uD83D\uDD10 AUTHENTICATION REQUIRED\r\n    let currentUser;\r\n    try {\r\n      currentUser = await requireAuth(request, env);\r\n    } catch (authError) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'AUTHENTICATION_REQUIRED',\r\n        message: 'Authentication required to access student data'\r\n      }), {\r\n        status: 401,\r\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // \uD83D\uDEE1\uFE0F ROLE-BASED ACCESS CONTROL\r\n    // Only admin and coach can manage students\r\n    if (!['admin', 'coach'].includes(currentUser.role)) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'INSUFFICIENT_PERMISSIONS',\r\n        message: 'Insufficient permissions to access student data'\r\n      }), {\r\n        status: 403,\r\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const ctx: RequestContext = { request, env, params };\r\n    \r\n    switch (request.method) {\r\n      case 'GET':\r\n        return params?.id ? await getStudent(ctx) : await getStudents(ctx);\r\n      case 'POST':\r\n        // Only admin can create students\r\n        if (currentUser.role !== 'admin') {\r\n          return new Response(JSON.stringify({\r\n            success: false,\r\n            error: 'INSUFFICIENT_PERMISSIONS',\r\n            message: 'Only administrators can create students'\r\n          }), {\r\n            status: 403,\r\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n        return await createStudent(ctx);\r\n      case 'PUT':\r\n        // Only admin can update students\r\n        if (currentUser.role !== 'admin') {\r\n          return new Response(JSON.stringify({\r\n            success: false,\r\n            error: 'INSUFFICIENT_PERMISSIONS',\r\n            message: 'Only administrators can update students'\r\n          }), {\r\n            status: 403,\r\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n        return await updateStudent(ctx);\r\n      case 'DELETE':\r\n        // Only admin can delete students\r\n        if (currentUser.role !== 'admin') {\r\n          return new Response(JSON.stringify({\r\n            success: false,\r\n            error: 'INSUFFICIENT_PERMISSIONS',\r\n            message: 'Only administrators can delete students'\r\n          }), {\r\n            status: 403,\r\n            headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n          });\r\n        }\r\n        return await deleteStudent(ctx);\r\n      default:\r\n        return new Response(JSON.stringify({\r\n          success: false,\r\n          error: 'METHOD_NOT_ALLOWED',\r\n          message: 'Method not allowed'\r\n        }), {\r\n          status: 405,\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n        });\r\n    }\r\n  } catch (error) {\r\n    console.error('Unhandled error:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'INTERNAL_ERROR',\r\n      message: 'Internal server error'\r\n    }), {\r\n      status: 500,\r\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\gengy\\\\Desktop\\\\akiraxtkd.com\\\\.wrangler\\\\tmp\\\\bundle-0gcos7\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\gengy\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\gengy\\\\Desktop\\\\akiraxtkd.com\\\\.wrangler\\\\tmp\\\\bundle-0gcos7\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\gengy\\\\Desktop\\\\akiraxtkd.com\\\\.wrangler\\\\tmp\\\\bundle-0gcos7\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\gengy\\\\Desktop\\\\akiraxtkd.com\\\\functions\\\\_worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\gengy\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\gengy\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\gengy\\\\Desktop\\\\akiraxtkd.com\\\\functions\\\\_worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "/**\n * Cloudflare Workers Entry Point\n * Routes requests to appropriate API handlers\n */\n\nexport default {\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url);\n    const pathname = url.pathname;\n\n    // Route API requests\n    if (pathname.startsWith('/api/')) {\n      // Auth endpoints\n      if (pathname.startsWith('/api/auth')) {\n        const { onRequest } = await import('./api/auth.ts');\n        return onRequest({ request, env, ctx });\n      }\n      \n      // Environment info endpoint\n      if (pathname === '/api/env-info') {\n        const { onRequest } = await import('./api/env-info.ts');\n        return onRequest({ request, env, ctx });\n      }\n      \n      // Dashboard endpoints\n      if (pathname.startsWith('/api/dashboard')) {\n        const { onRequest } = await import('./api/dashboard.ts');\n        return onRequest({ request, env, ctx });\n      }\n      \n      // Students endpoint (existing)\n      if (pathname.startsWith('/api/students')) {\n        const { onRequest } = await import('./api/students.ts');\n        return onRequest({ request, env, ctx });\n      }\n    }\n\n    // Default response for unmatched routes\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'API endpoint not found',\n      path: pathname,\n      available_endpoints: [\n        'POST /api/auth/login',\n        'GET /api/auth/me',\n        'GET /api/auth/dev-users',\n        'GET /api/env-info',\n        'GET /api/students',\n        'POST /api/students',\n      ],\n    }), {\n      status: 404,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      },\n    });\n  },\n};\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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",
  "names": ["onRequest", "handleCORS", "corsHeaders", "jsonResponse", "onRequest", "corsHeaders", "onRequest", "corsHeaders", "onRequest"]
}
