{
  "version": 3,
  "sources": ["../bundle-98xaVL/checked-fetch.js", "wrangler-modules-watch:wrangler:modules-watch", "../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/modules-watch-stub.js", "../../../functions/api/auth.ts", "../../../functions/api/env-info.ts", "../../../functions/api/students.ts", "../bundle-98xaVL/middleware-loader.entry.ts", "../bundle-98xaVL/middleware-insertion-facade.js", "../../../functions/_worker.js", "../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "C:\\Users\\gengy\\Desktop\\akiraxtkd.com\\.wrangler\\tmp\\dev-F2CahP",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", "/**\r\n * Authentication API Endpoints\r\n * Handles user login, registration, and session management\r\n */\r\n\r\ninterface Env {\r\n  DB: D1Database;\r\n  ENVIRONMENT: string;\r\n  DEV_MODE: string;\r\n  AUTH_ENABLED: string;\r\n  DEV_USERS_ENABLED: string;\r\n}\r\n\r\ninterface UserAccount {\r\n  user_id: string;\r\n  email: string;\r\n  google_id?: string;\r\n  firebase_uid: string;\r\n  role: 'student' | 'coach' | 'admin';\r\n  status: 'active' | 'inactive' | 'suspended';\r\n  display_name?: string;\r\n  photo_url?: string;\r\n  email_verified: boolean;\r\n  provider: 'google' | 'email' | 'dev';\r\n  last_login_at?: string;\r\n  login_count: number;\r\n  terms_accepted_at?: string;\r\n  privacy_accepted_at?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface LoginRequest {\r\n  firebase_token?: string;\r\n  dev_user_email?: string;\r\n}\r\n\r\ninterface LoginResponse {\r\n  success: boolean;\r\n  user?: UserAccount;\r\n  session_token?: string;\r\n  error?: string;\r\n  dev_mode?: boolean;\r\n}\r\n\r\n// CORS headers for all responses\r\nconst corsHeaders = {\r\n  'Access-Control-Allow-Origin': '*',\r\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n};\r\n\r\n/**\r\n * Handle CORS preflight requests\r\n */\r\nfunction handleCORS(): Response {\r\n  return new Response(null, {\r\n    status: 200,\r\n    headers: corsHeaders,\r\n  });\r\n}\r\n\r\n/**\r\n * Create JSON response with CORS headers\r\n */\r\nfunction jsonResponse(data: any, status: number = 200): Response {\r\n  return new Response(JSON.stringify(data), {\r\n    status,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...corsHeaders,\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * Verify Firebase ID Token (placeholder for production)\r\n */\r\nasync function verifyFirebaseToken(token: string): Promise<any> {\r\n  // TODO: Implement Firebase Admin SDK verification\r\n  // For now, return mock data for development\r\n  return {\r\n    uid: 'firebase_' + Date.now(),\r\n    email: 'user@example.com',\r\n    name: 'Test User',\r\n    picture: 'https://example.com/avatar.jpg',\r\n    email_verified: true,\r\n  };\r\n}\r\n\r\n/**\r\n * Get or create user account in D1 database\r\n */\r\nasync function getOrCreateUser(db: D1Database, firebaseUser: any, provider: string = 'google'): Promise<UserAccount> {\r\n  // Check if user exists\r\n  const existingUser = await db\r\n    .prepare('SELECT * FROM user_accounts WHERE firebase_uid = ? OR email = ?')\r\n    .bind(firebaseUser.uid, firebaseUser.email)\r\n    .first<UserAccount>();\r\n\r\n  if (existingUser) {\r\n    // Update last login\r\n    await db\r\n      .prepare(`\r\n        UPDATE user_accounts \r\n        SET last_login_at = CURRENT_TIMESTAMP, \r\n            login_count = login_count + 1,\r\n            updated_at = CURRENT_TIMESTAMP\r\n        WHERE user_id = ?\r\n      `)\r\n      .bind(existingUser.user_id)\r\n      .run();\r\n\r\n    return existingUser;\r\n  }\r\n\r\n  // Create new user\r\n  const userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  \r\n  await db\r\n    .prepare(`\r\n      INSERT INTO user_accounts (\r\n        user_id, email, firebase_uid, role, status, display_name, \r\n        photo_url, email_verified, provider, login_count,\r\n        created_at, updated_at\r\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\r\n    `)\r\n    .bind(\r\n      userId,\r\n      firebaseUser.email,\r\n      firebaseUser.uid,\r\n      'student', // Default role\r\n      'active',\r\n      firebaseUser.name || firebaseUser.email,\r\n      firebaseUser.picture || null,\r\n      firebaseUser.email_verified || false,\r\n      provider,\r\n      1\r\n    )\r\n    .run();\r\n\r\n  // Fetch the created user\r\n  const newUser = await db\r\n    .prepare('SELECT * FROM user_accounts WHERE user_id = ?')\r\n    .bind(userId)\r\n    .first<UserAccount>();\r\n\r\n  if (!newUser) {\r\n    throw new Error('Failed to create user account');\r\n  }\r\n\r\n  return newUser;\r\n}\r\n\r\n/**\r\n * Development mode: Get dev user by email\r\n */\r\nasync function getDevUser(db: D1Database, email: string): Promise<UserAccount | null> {\r\n  const user = await db\r\n    .prepare('SELECT * FROM user_accounts WHERE email = ? AND provider = ?')\r\n    .bind(email, 'dev')\r\n    .first<UserAccount>();\r\n\r\n  if (user) {\r\n    // Update last login for dev user\r\n    await db\r\n      .prepare(`\r\n        UPDATE user_accounts \r\n        SET last_login_at = CURRENT_TIMESTAMP, \r\n            login_count = login_count + 1,\r\n            updated_at = CURRENT_TIMESTAMP\r\n        WHERE user_id = ?\r\n      `)\r\n      .bind(user.user_id)\r\n      .run();\r\n  }\r\n\r\n  return user;\r\n}\r\n\r\n/**\r\n * Generate simple session token (for development)\r\n */\r\nfunction generateSessionToken(user: UserAccount): string {\r\n  const payload = {\r\n    user_id: user.user_id,\r\n    email: user.email,\r\n    role: user.role,\r\n    exp: Date.now() + (24 * 60 * 60 * 1000), // 24 hours\r\n  };\r\n  \r\n  // In production, use proper JWT signing\r\n  return btoa(JSON.stringify(payload));\r\n}\r\n\r\n/**\r\n * Handle login request\r\n */\r\nasync function handleLogin(request: Request, env: Env): Promise<Response> {\r\n  try {\r\n    const body: LoginRequest = await request.json();\r\n    const isDev = env.DEV_MODE === 'true';\r\n    const authEnabled = env.AUTH_ENABLED === 'true';\r\n    const devUsersEnabled = env.DEV_USERS_ENABLED === 'true';\r\n\r\n    // Development mode login\r\n    if (isDev && !authEnabled && devUsersEnabled && body.dev_user_email) {\r\n      const devUser = await getDevUser(env.DB, body.dev_user_email);\r\n      \r\n      if (!devUser) {\r\n        return jsonResponse({\r\n          success: false,\r\n          error: 'Development user not found',\r\n          dev_mode: true,\r\n        }, 404);\r\n      }\r\n\r\n      const sessionToken = generateSessionToken(devUser);\r\n\r\n      return jsonResponse({\r\n        success: true,\r\n        user: devUser,\r\n        session_token: sessionToken,\r\n        dev_mode: true,\r\n      });\r\n    }\r\n\r\n    // Production mode login with Firebase\r\n    if (authEnabled && body.firebase_token) {\r\n      try {\r\n        const firebaseUser = await verifyFirebaseToken(body.firebase_token);\r\n        const user = await getOrCreateUser(env.DB, firebaseUser);\r\n        const sessionToken = generateSessionToken(user);\r\n\r\n        return jsonResponse({\r\n          success: true,\r\n          user,\r\n          session_token: sessionToken,\r\n          dev_mode: false,\r\n        });\r\n      } catch (error) {\r\n        return jsonResponse({\r\n          success: false,\r\n          error: 'Invalid Firebase token',\r\n          dev_mode: false,\r\n        }, 401);\r\n      }\r\n    }\r\n\r\n    return jsonResponse({\r\n      success: false,\r\n      error: 'Invalid login request',\r\n      dev_mode: isDev,\r\n    }, 400);\r\n\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    return jsonResponse({\r\n      success: false,\r\n      error: 'Internal server error',\r\n    }, 500);\r\n  }\r\n}\r\n\r\n/**\r\n * Get current user info\r\n */\r\nasync function handleMe(request: Request, env: Env): Promise<Response> {\r\n  try {\r\n    const authHeader = request.headers.get('Authorization');\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      return jsonResponse({\r\n        success: false,\r\n        error: 'No authorization token provided',\r\n      }, 401);\r\n    }\r\n\r\n    const token = authHeader.substring(7);\r\n    \r\n    try {\r\n      // Decode session token (in production, verify JWT signature)\r\n      const payload = JSON.parse(atob(token));\r\n      \r\n      // Check if token is expired\r\n      if (payload.exp < Date.now()) {\r\n        return jsonResponse({\r\n          success: false,\r\n          error: 'Token expired',\r\n        }, 401);\r\n      }\r\n\r\n      // Get current user data from database\r\n      const user = await env.DB\r\n        .prepare('SELECT * FROM user_accounts WHERE user_id = ?')\r\n        .bind(payload.user_id)\r\n        .first<UserAccount>();\r\n\r\n      if (!user) {\r\n        return jsonResponse({\r\n          success: false,\r\n          error: 'User not found',\r\n        }, 404);\r\n      }\r\n\r\n      return jsonResponse({\r\n        success: true,\r\n        user,\r\n      });\r\n\r\n    } catch (error) {\r\n      return jsonResponse({\r\n        success: false,\r\n        error: 'Invalid token',\r\n      }, 401);\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Me endpoint error:', error);\r\n    return jsonResponse({\r\n      success: false,\r\n      error: 'Internal server error',\r\n    }, 500);\r\n  }\r\n}\r\n\r\n/**\r\n * Get development users (only in dev mode)\r\n */\r\nasync function handleDevUsers(request: Request, env: Env): Promise<Response> {\r\n  const isDev = env.DEV_MODE === 'true';\r\n  const devUsersEnabled = env.DEV_USERS_ENABLED === 'true';\r\n\r\n  if (!isDev || !devUsersEnabled) {\r\n    return jsonResponse({\r\n      success: false,\r\n      error: 'Development users not available',\r\n    }, 403);\r\n  }\r\n\r\n  try {\r\n    const devUsers = await env.DB\r\n      .prepare('SELECT user_id, email, role, display_name, status FROM user_accounts WHERE provider = ? ORDER BY role')\r\n      .bind('dev')\r\n      .all();\r\n\r\n    return jsonResponse({\r\n      success: true,\r\n      users: devUsers.results,\r\n      dev_mode: true,\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Dev users error:', error);\r\n    return jsonResponse({\r\n      success: false,\r\n      error: 'Failed to fetch development users',\r\n    }, 500);\r\n  }\r\n}\r\n\r\n/**\r\n * Main request handler\r\n */\r\nexport async function onRequest(context: any): Promise<Response> {\r\n  const { request, env } = context;\r\n  const url = new URL(request.url);\r\n  const method = request.method;\r\n\r\n  // Handle CORS preflight\r\n  if (method === 'OPTIONS') {\r\n    return handleCORS();\r\n  }\r\n\r\n  // Route requests\r\n  if (method === 'POST' && url.pathname.endsWith('/login')) {\r\n    return handleLogin(request, env);\r\n  }\r\n\r\n  if (method === 'GET' && url.pathname.endsWith('/me')) {\r\n    return handleMe(request, env);\r\n  }\r\n\r\n  if (method === 'GET' && url.pathname.endsWith('/dev-users')) {\r\n    return handleDevUsers(request, env);\r\n  }\r\n\r\n  // Default response\r\n  return jsonResponse({\r\n    success: false,\r\n    error: 'Endpoint not found',\r\n    available_endpoints: {\r\n      'POST /api/auth/login': 'User login',\r\n      'GET /api/auth/me': 'Get current user',\r\n      'GET /api/auth/dev-users': 'Get development users (dev mode only)',\r\n    },\r\n  }, 404);\r\n}\r\n", "/**\r\n * Environment Information API\r\n * Returns current environment configuration (dev mode only)\r\n */\r\n\r\ninterface Env {\r\n  ENVIRONMENT: string;\r\n  DEV_MODE: string;\r\n  AUTH_ENABLED: string;\r\n  DEV_USERS_ENABLED: string;\r\n  APP_NAME: string;\r\n  CONTACT_EMAIL: string;\r\n  WHATSAPP_NUMBER: string;\r\n}\r\n\r\n// CORS headers for all responses\r\nconst corsHeaders = {\r\n  'Access-Control-Allow-Origin': '*',\r\n  'Access-Control-Allow-Methods': 'GET, OPTIONS',\r\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n};\r\n\r\n/**\r\n * Handle CORS preflight requests\r\n */\r\nfunction handleCORS(): Response {\r\n  return new Response(null, {\r\n    status: 200,\r\n    headers: corsHeaders,\r\n  });\r\n}\r\n\r\n/**\r\n * Create JSON response with CORS headers\r\n */\r\nfunction jsonResponse(data: any, status: number = 200): Response {\r\n  return new Response(JSON.stringify(data), {\r\n    status,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...corsHeaders,\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * Get environment information\r\n */\r\nasync function handleEnvInfo(request: Request, env: Env): Promise<Response> {\r\n  const isDev = env.DEV_MODE === 'true';\r\n\r\n  // Only allow in development mode\r\n  if (!isDev) {\r\n    return jsonResponse({\r\n      success: false,\r\n      error: 'Environment information not available in production',\r\n    }, 403);\r\n  }\r\n\r\n  try {\r\n    const envInfo = {\r\n      success: true,\r\n      environment: env.ENVIRONMENT || 'unknown',\r\n      devMode: env.DEV_MODE === 'true',\r\n      authEnabled: env.AUTH_ENABLED === 'true',\r\n      devUsersEnabled: env.DEV_USERS_ENABLED === 'true',\r\n      databaseName: 'akiraxtkd-db-dev', // From wrangler.toml\r\n      appInfo: {\r\n        name: env.APP_NAME || 'Akira X Taekwondo',\r\n        contact: env.CONTACT_EMAIL || '',\r\n        whatsapp: env.WHATSAPP_NUMBER || '',\r\n      },\r\n      timestamp: new Date().toISOString(),\r\n      buildInfo: {\r\n        version: '1.0.0-dev',\r\n        node_env: 'development',\r\n        platform: 'cloudflare-workers',\r\n      },\r\n    };\r\n\r\n    return jsonResponse(envInfo);\r\n\r\n  } catch (error) {\r\n    console.error('Environment info error:', error);\r\n    return jsonResponse({\r\n      success: false,\r\n      error: 'Failed to retrieve environment information',\r\n    }, 500);\r\n  }\r\n}\r\n\r\n/**\r\n * Main request handler\r\n */\r\nexport async function onRequest(context: any): Promise<Response> {\r\n  const { request, env } = context;\r\n  const method = request.method;\r\n\r\n  // Handle CORS preflight\r\n  if (method === 'OPTIONS') {\r\n    return handleCORS();\r\n  }\r\n\r\n  // Only allow GET requests\r\n  if (method !== 'GET') {\r\n    return jsonResponse({\r\n      success: false,\r\n      error: 'Method not allowed',\r\n    }, 405);\r\n  }\r\n\r\n  return handleEnvInfo(request, env);\r\n}\r\n", "// Cloudflare Worker Function for Students API\r\n// /api/students endpoint\r\n\r\nimport { Env, Student, CreateStudentRequest, UpdateStudentRequest, ApiResponse, PaginatedResponse, QueryOptions } from '../../types/database';\r\n\r\ninterface RequestContext {\r\n  request: Request;\r\n  env: Env;\r\n  params?: { id?: string };\r\n}\r\n\r\n// Generate student code\r\nfunction generateStudentCode(): string {\r\n  const year = new Date().getFullYear();\r\n  const randomNum = Math.floor(Math.random() * 999) + 1;\r\n  return `AXT${year}${randomNum.toString().padStart(3, '0')}`;\r\n}\r\n\r\n// Validate student data\r\nfunction validateStudentData(data: any): { isValid: boolean; errors: string[] } {\r\n  const errors: string[] = [];\r\n  \r\n  if (!data.first_name || data.first_name.trim().length === 0) {\r\n    errors.push('First name is required');\r\n  }\r\n  \r\n  if (!data.last_name || data.last_name.trim().length === 0) {\r\n    errors.push('Last name is required');\r\n  }\r\n  \r\n  if (!data.date_of_birth) {\r\n    errors.push('Date of birth is required');\r\n  } else {\r\n    const birthDate = new Date(data.date_of_birth);\r\n    const today = new Date();\r\n    if (birthDate > today) {\r\n      errors.push('Date of birth cannot be in the future');\r\n    }\r\n  }\r\n  \r\n  if (!data.gender || !['Male', 'Female', 'Other'].includes(data.gender)) {\r\n    errors.push('Valid gender is required');\r\n  }\r\n  \r\n  if (data.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(data.email)) {\r\n    errors.push('Invalid email format');\r\n  }\r\n  \r\n  return { isValid: errors.length === 0, errors };\r\n}\r\n\r\n// Build WHERE clause for filtering\r\nfunction buildWhereClause(filters: any): { where: string; params: any[] } {\r\n  const conditions: string[] = [];\r\n  const params: any[] = [];\r\n  let paramIndex = 1;\r\n  \r\n  if (filters.status) {\r\n    if (Array.isArray(filters.status)) {\r\n      const placeholders = filters.status.map(() => `?${paramIndex++}`).join(',');\r\n      conditions.push(`status IN (${placeholders})`);\r\n      params.push(...filters.status);\r\n    } else {\r\n      conditions.push(`status = ?${paramIndex++}`);\r\n      params.push(filters.status);\r\n    }\r\n  }\r\n  \r\n  if (filters.gender) {\r\n    if (Array.isArray(filters.gender)) {\r\n      const placeholders = filters.gender.map(() => `?${paramIndex++}`).join(',');\r\n      conditions.push(`gender IN (${placeholders})`);\r\n      params.push(...filters.gender);\r\n    } else {\r\n      conditions.push(`gender = ?${paramIndex++}`);\r\n      params.push(filters.gender);\r\n    }\r\n  }\r\n  \r\n  if (filters.search) {\r\n    conditions.push(`(first_name LIKE ?${paramIndex} OR last_name LIKE ?${paramIndex + 1} OR email LIKE ?${paramIndex + 2})`);\r\n    const searchTerm = `%${filters.search}%`;\r\n    params.push(searchTerm, searchTerm, searchTerm);\r\n    paramIndex += 3;\r\n  }\r\n  \r\n  if (filters.date_from) {\r\n    conditions.push(`joined_date >= ?${paramIndex++}`);\r\n    params.push(filters.date_from);\r\n  }\r\n  \r\n  if (filters.date_to) {\r\n    conditions.push(`joined_date <= ?${paramIndex++}`);\r\n    params.push(filters.date_to);\r\n  }\r\n  \r\n  const where = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '';\r\n  return { where, params };\r\n}\r\n\r\n// GET /api/students - List all students with pagination and filtering\r\nasync function getStudents(context: RequestContext): Promise<Response> {\r\n  try {\r\n    const url = new URL(context.request.url);\r\n    const page = parseInt(url.searchParams.get('page') || '1');\r\n    const limit = Math.min(parseInt(url.searchParams.get('limit') || '10'), 100);\r\n    const offset = (page - 1) * limit;\r\n    \r\n    // Parse filters\r\n    const filters = {\r\n      status: url.searchParams.get('status'),\r\n      gender: url.searchParams.get('gender'),\r\n      search: url.searchParams.get('search'),\r\n      date_from: url.searchParams.get('date_from'),\r\n      date_to: url.searchParams.get('date_to'),\r\n    };\r\n    \r\n    // Parse sorting\r\n    const sortField = url.searchParams.get('sort_field') || 'created_at';\r\n    const sortOrder = url.searchParams.get('sort_order') || 'DESC';\r\n    \r\n    // Build query\r\n    const { where, params } = buildWhereClause(filters);\r\n    \r\n    // Get total count\r\n    const countQuery = `SELECT COUNT(*) as total FROM students ${where}`;\r\n    const countResult = await context.env.DB.prepare(countQuery).bind(...params).first();\r\n    const total = countResult?.total || 0;\r\n    \r\n    // Get students with current belt information\r\n    const studentsQuery = `\r\n      SELECT \r\n        s.*,\r\n        bl.belt_name,\r\n        bl.belt_color,\r\n        bl.level_order\r\n      FROM students s\r\n      LEFT JOIN (\r\n        SELECT \r\n          sbh.student_id,\r\n          sbh.belt_level_id,\r\n          ROW_NUMBER() OVER (PARTITION BY sbh.student_id ORDER BY sbh.achieved_date DESC) as rn\r\n        FROM student_belt_history sbh\r\n      ) latest_belt ON s.id = latest_belt.student_id AND latest_belt.rn = 1\r\n      LEFT JOIN belt_levels bl ON latest_belt.belt_level_id = bl.id\r\n      ${where}\r\n      ORDER BY ${sortField} ${sortOrder}\r\n      LIMIT ?${params.length + 1} OFFSET ?${params.length + 2}\r\n    `;\r\n    \r\n    const studentsResult = await context.env.DB.prepare(studentsQuery)\r\n      .bind(...params, limit, offset)\r\n      .all();\r\n    \r\n    const students = studentsResult.results.map((row: any) => ({\r\n      id: row.id,\r\n      student_code: row.student_code,\r\n      first_name: row.first_name,\r\n      last_name: row.last_name,\r\n      full_name: row.full_name,\r\n      date_of_birth: row.date_of_birth,\r\n      gender: row.gender,\r\n      phone: row.phone,\r\n      email: row.email,\r\n      joined_date: row.joined_date,\r\n      status: row.status,\r\n      created_at: row.created_at,\r\n      updated_at: row.updated_at,\r\n      current_belt: row.belt_name ? {\r\n        belt_name: row.belt_name,\r\n        belt_color: row.belt_color,\r\n        level_order: row.level_order\r\n      } : null\r\n    }));\r\n    \r\n    const response: PaginatedResponse<Student> = {\r\n      data: students,\r\n      pagination: {\r\n        page,\r\n        limit,\r\n        total,\r\n        total_pages: Math.ceil(total / limit),\r\n        has_next: offset + limit < total,\r\n        has_prev: page > 1\r\n      }\r\n    };\r\n    \r\n    return new Response(JSON.stringify({ success: true, ...response }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error fetching students:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'INTERNAL_ERROR',\r\n      message: 'Failed to fetch students'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\n// POST /api/students - Create new student\r\nasync function createStudent(context: RequestContext): Promise<Response> {\r\n  try {\r\n    const data: CreateStudentRequest = await context.request.json();\r\n    \r\n    // Validate data\r\n    const validation = validateStudentData(data);\r\n    if (!validation.isValid) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'VALIDATION_ERROR',\r\n        message: 'Invalid student data',\r\n        details: { field_errors: validation.errors }\r\n      }), {\r\n        status: 422,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Generate unique student code\r\n    let studentCode = generateStudentCode();\r\n    let attempts = 0;\r\n    while (attempts < 10) {\r\n      const existing = await context.env.DB.prepare(\r\n        'SELECT id FROM students WHERE student_code = ?'\r\n      ).bind(studentCode).first();\r\n      \r\n      if (!existing) break;\r\n      studentCode = generateStudentCode();\r\n      attempts++;\r\n    }\r\n    \r\n    if (attempts >= 10) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'GENERATION_ERROR',\r\n        message: 'Failed to generate unique student code'\r\n      }), {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Insert new student\r\n    const insertQuery = `\r\n      INSERT INTO students (\r\n        student_code, first_name, last_name, date_of_birth, gender,\r\n        phone, email, emergency_contact_name, emergency_contact_phone,\r\n        emergency_contact_relationship, address, postal_code, joined_date, notes\r\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n    `;\r\n    \r\n    const joinedDate = new Date().toISOString().split('T')[0];\r\n    const result = await context.env.DB.prepare(insertQuery).bind(\r\n      studentCode,\r\n      data.first_name,\r\n      data.last_name,\r\n      data.date_of_birth,\r\n      data.gender,\r\n      data.phone || null,\r\n      data.email || null,\r\n      data.emergency_contact_name || null,\r\n      data.emergency_contact_phone || null,\r\n      data.emergency_contact_relationship || null,\r\n      data.address || null,\r\n      data.postal_code || null,\r\n      joinedDate,\r\n      data.notes || null\r\n    ).run();\r\n    \r\n    if (!result.success) {\r\n      throw new Error('Failed to insert student');\r\n    }\r\n    \r\n    // Fetch the created student\r\n    const newStudent = await context.env.DB.prepare(\r\n      'SELECT * FROM students WHERE id = ?'\r\n    ).bind(result.meta.last_row_id).first();\r\n    \r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      data: newStudent,\r\n      message: 'Student created successfully'\r\n    }), {\r\n      status: 201,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error creating student:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'INTERNAL_ERROR',\r\n      message: 'Failed to create student'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\n// GET /api/students/{id} - Get specific student\r\nasync function getStudent(context: RequestContext): Promise<Response> {\r\n  try {\r\n    const studentId = context.params?.id;\r\n    if (!studentId || isNaN(parseInt(studentId))) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'INVALID_ID',\r\n        message: 'Valid student ID is required'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Get student with current belt and belt history\r\n    const studentQuery = `\r\n      SELECT \r\n        s.*,\r\n        bl.belt_name as current_belt_name,\r\n        bl.belt_color as current_belt_color,\r\n        bl.level_order as current_belt_order\r\n      FROM students s\r\n      LEFT JOIN (\r\n        SELECT \r\n          sbh.student_id,\r\n          sbh.belt_level_id,\r\n          ROW_NUMBER() OVER (PARTITION BY sbh.student_id ORDER BY sbh.achieved_date DESC) as rn\r\n        FROM student_belt_history sbh\r\n      ) latest_belt ON s.id = latest_belt.student_id AND latest_belt.rn = 1\r\n      LEFT JOIN belt_levels bl ON latest_belt.belt_level_id = bl.id\r\n      WHERE s.id = ?\r\n    `;\r\n    \r\n    const student = await context.env.DB.prepare(studentQuery).bind(studentId).first();\r\n    \r\n    if (!student) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'NOT_FOUND',\r\n        message: 'Student not found'\r\n      }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Get belt history\r\n    const beltHistoryQuery = `\r\n      SELECT \r\n        sbh.*,\r\n        bl.belt_name,\r\n        bl.belt_color,\r\n        bl.level_order\r\n      FROM student_belt_history sbh\r\n      LEFT JOIN belt_levels bl ON sbh.belt_level_id = bl.id\r\n      WHERE sbh.student_id = ?\r\n      ORDER BY sbh.achieved_date DESC\r\n    `;\r\n    \r\n    const beltHistory = await context.env.DB.prepare(beltHistoryQuery).bind(studentId).all();\r\n    \r\n    const studentWithDetails = {\r\n      ...student,\r\n      current_belt: student.current_belt_name ? {\r\n        belt_name: student.current_belt_name,\r\n        belt_color: student.current_belt_color,\r\n        level_order: student.current_belt_order\r\n      } : null,\r\n      belt_history: beltHistory.results\r\n    };\r\n    \r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      data: studentWithDetails\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error fetching student:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'INTERNAL_ERROR',\r\n      message: 'Failed to fetch student'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\n// PUT /api/students/{id} - Update student\r\nasync function updateStudent(context: RequestContext): Promise<Response> {\r\n  try {\r\n    const studentId = context.params?.id;\r\n    if (!studentId || isNaN(parseInt(studentId))) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'INVALID_ID',\r\n        message: 'Valid student ID is required'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    const data: UpdateStudentRequest = await context.request.json();\r\n    \r\n    // Validate data if provided\r\n    if (Object.keys(data).length > 0) {\r\n      const validation = validateStudentData({ ...data, first_name: data.first_name || 'dummy', last_name: data.last_name || 'dummy', date_of_birth: data.date_of_birth || '2000-01-01', gender: data.gender || 'Male' });\r\n      if (!validation.isValid && (data.first_name || data.last_name || data.date_of_birth || data.gender || data.email)) {\r\n        return new Response(JSON.stringify({\r\n          success: false,\r\n          error: 'VALIDATION_ERROR',\r\n          message: 'Invalid student data',\r\n          details: { field_errors: validation.errors }\r\n        }), {\r\n          status: 422,\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Check if student exists\r\n    const existing = await context.env.DB.prepare('SELECT id FROM students WHERE id = ?').bind(studentId).first();\r\n    if (!existing) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'NOT_FOUND',\r\n        message: 'Student not found'\r\n      }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Build update query\r\n    const updateFields: string[] = [];\r\n    const updateValues: any[] = [];\r\n    \r\n    if (data.first_name !== undefined) {\r\n      updateFields.push('first_name = ?');\r\n      updateValues.push(data.first_name);\r\n    }\r\n    if (data.last_name !== undefined) {\r\n      updateFields.push('last_name = ?');\r\n      updateValues.push(data.last_name);\r\n    }\r\n    if (data.date_of_birth !== undefined) {\r\n      updateFields.push('date_of_birth = ?');\r\n      updateValues.push(data.date_of_birth);\r\n    }\r\n    if (data.gender !== undefined) {\r\n      updateFields.push('gender = ?');\r\n      updateValues.push(data.gender);\r\n    }\r\n    if (data.phone !== undefined) {\r\n      updateFields.push('phone = ?');\r\n      updateValues.push(data.phone);\r\n    }\r\n    if (data.email !== undefined) {\r\n      updateFields.push('email = ?');\r\n      updateValues.push(data.email);\r\n    }\r\n    if (data.status !== undefined) {\r\n      updateFields.push('status = ?');\r\n      updateValues.push(data.status);\r\n    }\r\n    \r\n    if (updateFields.length === 0) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'NO_UPDATES',\r\n        message: 'No fields to update'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    updateFields.push('updated_at = CURRENT_TIMESTAMP');\r\n    updateValues.push(studentId);\r\n    \r\n    const updateQuery = `UPDATE students SET ${updateFields.join(', ')} WHERE id = ?`;\r\n    await context.env.DB.prepare(updateQuery).bind(...updateValues).run();\r\n    \r\n    // Fetch updated student\r\n    const updatedStudent = await context.env.DB.prepare('SELECT * FROM students WHERE id = ?').bind(studentId).first();\r\n    \r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      data: updatedStudent,\r\n      message: 'Student updated successfully'\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error updating student:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'INTERNAL_ERROR',\r\n      message: 'Failed to update student'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\n// DELETE /api/students/{id} - Soft delete student\r\nasync function deleteStudent(context: RequestContext): Promise<Response> {\r\n  try {\r\n    const studentId = context.params?.id;\r\n    if (!studentId || isNaN(parseInt(studentId))) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'INVALID_ID',\r\n        message: 'Valid student ID is required'\r\n      }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Check if student exists\r\n    const existing = await context.env.DB.prepare('SELECT id FROM students WHERE id = ?').bind(studentId).first();\r\n    if (!existing) {\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'NOT_FOUND',\r\n        message: 'Student not found'\r\n      }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n    \r\n    // Soft delete (mark as inactive)\r\n    await context.env.DB.prepare(\r\n      'UPDATE students SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?'\r\n    ).bind('Inactive', studentId).run();\r\n    \r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      message: 'Student deleted successfully'\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error deleting student:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'INTERNAL_ERROR',\r\n      message: 'Failed to delete student'\r\n    }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n\r\n// Main handler function\r\nexport async function onRequest(context: any): Promise<Response> {\r\n  const { request, env, params } = context;\r\n  \r\n  // CORS headers\r\n  const corsHeaders = {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n  };\r\n  \r\n  // Handle preflight OPTIONS request\r\n  if (request.method === 'OPTIONS') {\r\n    return new Response(null, { headers: corsHeaders });\r\n  }\r\n  \r\n  try {\r\n    const ctx: RequestContext = { request, env, params };\r\n    \r\n    switch (request.method) {\r\n      case 'GET':\r\n        return params?.id ? await getStudent(ctx) : await getStudents(ctx);\r\n      case 'POST':\r\n        return await createStudent(ctx);\r\n      case 'PUT':\r\n        return await updateStudent(ctx);\r\n      case 'DELETE':\r\n        return await deleteStudent(ctx);\r\n      default:\r\n        return new Response(JSON.stringify({\r\n          success: false,\r\n          error: 'METHOD_NOT_ALLOWED',\r\n          message: 'Method not allowed'\r\n        }), {\r\n          status: 405,\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n        });\r\n    }\r\n  } catch (error) {\r\n    console.error('Unhandled error:', error);\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'INTERNAL_ERROR',\r\n      message: 'Internal server error'\r\n    }), {\r\n      status: 500,\r\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n}\r\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\gengy\\\\Desktop\\\\akiraxtkd.com\\\\.wrangler\\\\tmp\\\\bundle-98xaVL\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\gengy\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\gengy\\\\Desktop\\\\akiraxtkd.com\\\\.wrangler\\\\tmp\\\\bundle-98xaVL\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\gengy\\\\Desktop\\\\akiraxtkd.com\\\\.wrangler\\\\tmp\\\\bundle-98xaVL\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\gengy\\\\Desktop\\\\akiraxtkd.com\\\\functions\\\\_worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\gengy\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\gengy\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\gengy\\\\Desktop\\\\akiraxtkd.com\\\\functions\\\\_worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "/**\r\n * Cloudflare Workers Entry Point\r\n * Routes requests to appropriate API handlers\r\n */\r\n\r\nexport default {\r\n  async fetch(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    const pathname = url.pathname;\r\n\r\n    // Route API requests\r\n    if (pathname.startsWith('/api/')) {\r\n      // Auth endpoints\r\n      if (pathname.startsWith('/api/auth')) {\r\n        const { onRequest } = await import('./api/auth.ts');\r\n        return onRequest({ request, env, ctx });\r\n      }\r\n      \r\n      // Environment info endpoint\r\n      if (pathname === '/api/env-info') {\r\n        const { onRequest } = await import('./api/env-info.ts');\r\n        return onRequest({ request, env, ctx });\r\n      }\r\n      \r\n      // Students endpoint (existing)\r\n      if (pathname.startsWith('/api/students')) {\r\n        const { onRequest } = await import('./api/students.ts');\r\n        return onRequest({ request, env, ctx });\r\n      }\r\n    }\r\n\r\n    // Default response for unmatched routes\r\n    return new Response(JSON.stringify({\r\n      success: false,\r\n      error: 'API endpoint not found',\r\n      path: pathname,\r\n      available_endpoints: [\r\n        'POST /api/auth/login',\r\n        'GET /api/auth/me',\r\n        'GET /api/auth/dev-users',\r\n        'GET /api/env-info',\r\n        'GET /api/students',\r\n        'POST /api/students',\r\n      ],\r\n    }), {\r\n      status: 404,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n      },\r\n    });\r\n  },\r\n};\r\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": ";;;;;;;;;;;;AAEA,SAAS,SAAS,SAAS,MAAM;AAChC,QAAM,MACL,mBAAmB,MAChB,UACA,IAAI;AAAA,KACH,OAAO,YAAY,WACjB,IAAI,QAAQ,SAAS,IAAI,IACzB,SACD;AAAA,EACH;AACH,MAAI,IAAI,QAAQ,IAAI,SAAS,SAAS,IAAI,aAAa,UAAU;AAChE,QAAI,CAAC,KAAK,IAAI,IAAI,SAAS,CAAC,GAAG;AAC9B,WAAK,IAAI,IAAI,SAAS,CAAC;AACvB,cAAQ;AAAA,QACP;AAAA,KACO,IAAI,SAAS,CAAC;AAAA;AAAA,MACtB;AAAA,IACD;AAAA,EACD;AACD;AArBA,IAAM;AAAN;AAAA;AAAA;AAAA,IAAM,OAAO,oBAAI,IAAI;AAEZ;AAqBT,eAAW,QAAQ,IAAI,MAAM,WAAW,OAAO;AAAA,MAC9C,MAAM,QAAQ,SAAS,UAAU;AAChC,cAAM,CAAC,SAAS,IAAI,IAAI;AACxB,iBAAS,SAAS,IAAI;AACtB,eAAO,QAAQ,MAAM,QAAQ,SAAS,QAAQ;AAAA,MAC/C;AAAA,IACD,CAAC;AAAA;AAAA;;;AC7BD;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAGA;AAAA;AAAA;;;ACHA;AAAA;AAAA;AAAA;AAuDA,SAAS,aAAuB;AAC9B,SAAO,IAAI,SAAS,MAAM;AAAA,IACxB,QAAQ;AAAA,IACR,SAAS;AAAA,EACX,CAAC;AACH;AAKA,SAAS,aAAa,MAAW,SAAiB,KAAe;AAC/D,SAAO,IAAI,SAAS,KAAK,UAAU,IAAI,GAAG;AAAA,IACxC;AAAA,IACA,SAAS;AAAA,MACP,gBAAgB;AAAA,MAChB,GAAG;AAAA,IACL;AAAA,EACF,CAAC;AACH;AAKA,eAAe,oBAAoB,OAA6B;AAG9D,SAAO;AAAA,IACL,KAAK,cAAc,KAAK,IAAI;AAAA,IAC5B,OAAO;AAAA,IACP,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,EAClB;AACF;AAKA,eAAe,gBAAgB,IAAgB,cAAmB,WAAmB,UAAgC;AAEnH,QAAM,eAAe,MAAM,GACxB,QAAQ,iEAAiE,EACzE,KAAK,aAAa,KAAK,aAAa,KAAK,EACzC,MAAmB;AAEtB,MAAI,cAAc;AAEhB,UAAM,GACH,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMR,EACA,KAAK,aAAa,OAAO,EACzB,IAAI;AAEP,WAAO;AAAA,EACT;AAGA,QAAM,SAAS,QAAQ,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC,CAAC;AAE5E,QAAM,GACH,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMR,EACA;AAAA,IACC;AAAA,IACA,aAAa;AAAA,IACb,aAAa;AAAA,IACb;AAAA;AAAA,IACA;AAAA,IACA,aAAa,QAAQ,aAAa;AAAA,IAClC,aAAa,WAAW;AAAA,IACxB,aAAa,kBAAkB;AAAA,IAC/B;AAAA,IACA;AAAA,EACF,EACC,IAAI;AAGP,QAAM,UAAU,MAAM,GACnB,QAAQ,+CAA+C,EACvD,KAAK,MAAM,EACX,MAAmB;AAEtB,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,+BAA+B;AAAA,EACjD;AAEA,SAAO;AACT;AAKA,eAAe,WAAW,IAAgB,OAA4C;AACpF,QAAM,OAAO,MAAM,GAChB,QAAQ,8DAA8D,EACtE,KAAK,OAAO,KAAK,EACjB,MAAmB;AAEtB,MAAI,MAAM;AAER,UAAM,GACH,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMR,EACA,KAAK,KAAK,OAAO,EACjB,IAAI;AAAA,EACT;AAEA,SAAO;AACT;AAKA,SAAS,qBAAqB,MAA2B;AACvD,QAAM,UAAU;AAAA,IACd,SAAS,KAAK;AAAA,IACd,OAAO,KAAK;AAAA,IACZ,MAAM,KAAK;AAAA,IACX,KAAK,KAAK,IAAI,IAAK,KAAK,KAAK,KAAK;AAAA;AAAA,EACpC;AAGA,SAAO,KAAK,KAAK,UAAU,OAAO,CAAC;AACrC;AAKA,eAAe,YAAY,SAAkB,KAA6B;AACxE,MAAI;AACF,UAAM,OAAqB,MAAM,QAAQ,KAAK;AAC9C,UAAM,QAAQ,IAAI,aAAa;AAC/B,UAAM,cAAc,IAAI,iBAAiB;AACzC,UAAM,kBAAkB,IAAI,sBAAsB;AAGlD,QAAI,SAAS,CAAC,eAAe,mBAAmB,KAAK,gBAAgB;AACnE,YAAM,UAAU,MAAM,WAAW,IAAI,IAAI,KAAK,cAAc;AAE5D,UAAI,CAAC,SAAS;AACZ,eAAO,aAAa;AAAA,UAClB,SAAS;AAAA,UACT,OAAO;AAAA,UACP,UAAU;AAAA,QACZ,GAAG,GAAG;AAAA,MACR;AAEA,YAAM,eAAe,qBAAqB,OAAO;AAEjD,aAAO,aAAa;AAAA,QAClB,SAAS;AAAA,QACT,MAAM;AAAA,QACN,eAAe;AAAA,QACf,UAAU;AAAA,MACZ,CAAC;AAAA,IACH;AAGA,QAAI,eAAe,KAAK,gBAAgB;AACtC,UAAI;AACF,cAAM,eAAe,MAAM,oBAAoB,KAAK,cAAc;AAClE,cAAM,OAAO,MAAM,gBAAgB,IAAI,IAAI,YAAY;AACvD,cAAM,eAAe,qBAAqB,IAAI;AAE9C,eAAO,aAAa;AAAA,UAClB,SAAS;AAAA,UACT;AAAA,UACA,eAAe;AAAA,UACf,UAAU;AAAA,QACZ,CAAC;AAAA,MACH,SAAS,OAAO;AACd,eAAO,aAAa;AAAA,UAClB,SAAS;AAAA,UACT,OAAO;AAAA,UACP,UAAU;AAAA,QACZ,GAAG,GAAG;AAAA,MACR;AAAA,IACF;AAEA,WAAO,aAAa;AAAA,MAClB,SAAS;AAAA,MACT,OAAO;AAAA,MACP,UAAU;AAAA,IACZ,GAAG,GAAG;AAAA,EAER,SAAS,OAAO;AACd,YAAQ,MAAM,gBAAgB,KAAK;AACnC,WAAO,aAAa;AAAA,MAClB,SAAS;AAAA,MACT,OAAO;AAAA,IACT,GAAG,GAAG;AAAA,EACR;AACF;AAKA,eAAe,SAAS,SAAkB,KAA6B;AACrE,MAAI;AACF,UAAM,aAAa,QAAQ,QAAQ,IAAI,eAAe;AACtD,QAAI,CAAC,cAAc,CAAC,WAAW,WAAW,SAAS,GAAG;AACpD,aAAO,aAAa;AAAA,QAClB,SAAS;AAAA,QACT,OAAO;AAAA,MACT,GAAG,GAAG;AAAA,IACR;AAEA,UAAM,QAAQ,WAAW,UAAU,CAAC;AAEpC,QAAI;AAEF,YAAM,UAAU,KAAK,MAAM,KAAK,KAAK,CAAC;AAGtC,UAAI,QAAQ,MAAM,KAAK,IAAI,GAAG;AAC5B,eAAO,aAAa;AAAA,UAClB,SAAS;AAAA,UACT,OAAO;AAAA,QACT,GAAG,GAAG;AAAA,MACR;AAGA,YAAM,OAAO,MAAM,IAAI,GACpB,QAAQ,+CAA+C,EACvD,KAAK,QAAQ,OAAO,EACpB,MAAmB;AAEtB,UAAI,CAAC,MAAM;AACT,eAAO,aAAa;AAAA,UAClB,SAAS;AAAA,UACT,OAAO;AAAA,QACT,GAAG,GAAG;AAAA,MACR;AAEA,aAAO,aAAa;AAAA,QAClB,SAAS;AAAA,QACT;AAAA,MACF,CAAC;AAAA,IAEH,SAAS,OAAO;AACd,aAAO,aAAa;AAAA,QAClB,SAAS;AAAA,QACT,OAAO;AAAA,MACT,GAAG,GAAG;AAAA,IACR;AAAA,EAEF,SAAS,OAAO;AACd,YAAQ,MAAM,sBAAsB,KAAK;AACzC,WAAO,aAAa;AAAA,MAClB,SAAS;AAAA,MACT,OAAO;AAAA,IACT,GAAG,GAAG;AAAA,EACR;AACF;AAKA,eAAe,eAAe,SAAkB,KAA6B;AAC3E,QAAM,QAAQ,IAAI,aAAa;AAC/B,QAAM,kBAAkB,IAAI,sBAAsB;AAElD,MAAI,CAAC,SAAS,CAAC,iBAAiB;AAC9B,WAAO,aAAa;AAAA,MAClB,SAAS;AAAA,MACT,OAAO;AAAA,IACT,GAAG,GAAG;AAAA,EACR;AAEA,MAAI;AACF,UAAM,WAAW,MAAM,IAAI,GACxB,QAAQ,uGAAuG,EAC/G,KAAK,KAAK,EACV,IAAI;AAEP,WAAO,aAAa;AAAA,MAClB,SAAS;AAAA,MACT,OAAO,SAAS;AAAA,MAChB,UAAU;AAAA,IACZ,CAAC;AAAA,EAEH,SAAS,OAAO;AACd,YAAQ,MAAM,oBAAoB,KAAK;AACvC,WAAO,aAAa;AAAA,MAClB,SAAS;AAAA,MACT,OAAO;AAAA,IACT,GAAG,GAAG;AAAA,EACR;AACF;AAKA,eAAsB,UAAU,SAAiC;AAC/D,QAAM,EAAE,SAAS,IAAI,IAAI;AACzB,QAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,QAAM,SAAS,QAAQ;AAGvB,MAAI,WAAW,WAAW;AACxB,WAAO,WAAW;AAAA,EACpB;AAGA,MAAI,WAAW,UAAU,IAAI,SAAS,SAAS,QAAQ,GAAG;AACxD,WAAO,YAAY,SAAS,GAAG;AAAA,EACjC;AAEA,MAAI,WAAW,SAAS,IAAI,SAAS,SAAS,KAAK,GAAG;AACpD,WAAO,SAAS,SAAS,GAAG;AAAA,EAC9B;AAEA,MAAI,WAAW,SAAS,IAAI,SAAS,SAAS,YAAY,GAAG;AAC3D,WAAO,eAAe,SAAS,GAAG;AAAA,EACpC;AAGA,SAAO,aAAa;AAAA,IAClB,SAAS;AAAA,IACT,OAAO;AAAA,IACP,qBAAqB;AAAA,MACnB,wBAAwB;AAAA,MACxB,oBAAoB;AAAA,MACpB,2BAA2B;AAAA,IAC7B;AAAA,EACF,GAAG,GAAG;AACR;AA5YA,IA8CM;AA9CN;AAAA;AAAA;AAAA;AAAA;AA8CA,IAAM,cAAc;AAAA,MAClB,+BAA+B;AAAA,MAC/B,gCAAgC;AAAA,MAChC,gCAAgC;AAAA,IAClC;AAKS;AAUA;AAaM;AAeA;AAgEA;AA0BN;AAeM;AAqEA;AA6DA;AAmCO;AAAA;AAAA;;;AC3WtB;AAAA;AAAA,mBAAAA;AAAA;AAyBA,SAASC,cAAuB;AAC9B,SAAO,IAAI,SAAS,MAAM;AAAA,IACxB,QAAQ;AAAA,IACR,SAASC;AAAA,EACX,CAAC;AACH;AAKA,SAASC,cAAa,MAAW,SAAiB,KAAe;AAC/D,SAAO,IAAI,SAAS,KAAK,UAAU,IAAI,GAAG;AAAA,IACxC;AAAA,IACA,SAAS;AAAA,MACP,gBAAgB;AAAA,MAChB,GAAGD;AAAA,IACL;AAAA,EACF,CAAC;AACH;AAKA,eAAe,cAAc,SAAkB,KAA6B;AAC1E,QAAM,QAAQ,IAAI,aAAa;AAG/B,MAAI,CAAC,OAAO;AACV,WAAOC,cAAa;AAAA,MAClB,SAAS;AAAA,MACT,OAAO;AAAA,IACT,GAAG,GAAG;AAAA,EACR;AAEA,MAAI;AACF,UAAM,UAAU;AAAA,MACd,SAAS;AAAA,MACT,aAAa,IAAI,eAAe;AAAA,MAChC,SAAS,IAAI,aAAa;AAAA,MAC1B,aAAa,IAAI,iBAAiB;AAAA,MAClC,iBAAiB,IAAI,sBAAsB;AAAA,MAC3C,cAAc;AAAA;AAAA,MACd,SAAS;AAAA,QACP,MAAM,IAAI,YAAY;AAAA,QACtB,SAAS,IAAI,iBAAiB;AAAA,QAC9B,UAAU,IAAI,mBAAmB;AAAA,MACnC;AAAA,MACA,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,WAAW;AAAA,QACT,SAAS;AAAA,QACT,UAAU;AAAA,QACV,UAAU;AAAA,MACZ;AAAA,IACF;AAEA,WAAOA,cAAa,OAAO;AAAA,EAE7B,SAAS,OAAO;AACd,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,WAAOA,cAAa;AAAA,MAClB,SAAS;AAAA,MACT,OAAO;AAAA,IACT,GAAG,GAAG;AAAA,EACR;AACF;AAKA,eAAsBH,WAAU,SAAiC;AAC/D,QAAM,EAAE,SAAS,IAAI,IAAI;AACzB,QAAM,SAAS,QAAQ;AAGvB,MAAI,WAAW,WAAW;AACxB,WAAOC,YAAW;AAAA,EACpB;AAGA,MAAI,WAAW,OAAO;AACpB,WAAOE,cAAa;AAAA,MAClB,SAAS;AAAA,MACT,OAAO;AAAA,IACT,GAAG,GAAG;AAAA,EACR;AAEA,SAAO,cAAc,SAAS,GAAG;AACnC;AAhHA,IAgBMD;AAhBN;AAAA;AAAA;AAAA;AAAA;AAgBA,IAAMA,eAAc;AAAA,MAClB,+BAA+B;AAAA,MAC/B,gCAAgC;AAAA,MAChC,gCAAgC;AAAA,IAClC;AAKS,WAAAD,aAAA;AAUA,WAAAE,eAAA;AAaM;AA8CO,WAAAH,YAAA;AAAA;AAAA;;;AC9FtB;AAAA;AAAA,mBAAAI;AAAA;AAYA,SAAS,sBAA8B;AACrC,QAAM,QAAO,oBAAI,KAAK,GAAE,YAAY;AACpC,QAAM,YAAY,KAAK,MAAM,KAAK,OAAO,IAAI,GAAG,IAAI;AACpD,SAAO,MAAM,IAAI,GAAG,UAAU,SAAS,EAAE,SAAS,GAAG,GAAG,CAAC;AAC3D;AAGA,SAAS,oBAAoB,MAAmD;AAC9E,QAAM,SAAmB,CAAC;AAE1B,MAAI,CAAC,KAAK,cAAc,KAAK,WAAW,KAAK,EAAE,WAAW,GAAG;AAC3D,WAAO,KAAK,wBAAwB;AAAA,EACtC;AAEA,MAAI,CAAC,KAAK,aAAa,KAAK,UAAU,KAAK,EAAE,WAAW,GAAG;AACzD,WAAO,KAAK,uBAAuB;AAAA,EACrC;AAEA,MAAI,CAAC,KAAK,eAAe;AACvB,WAAO,KAAK,2BAA2B;AAAA,EACzC,OAAO;AACL,UAAM,YAAY,IAAI,KAAK,KAAK,aAAa;AAC7C,UAAM,QAAQ,oBAAI,KAAK;AACvB,QAAI,YAAY,OAAO;AACrB,aAAO,KAAK,uCAAuC;AAAA,IACrD;AAAA,EACF;AAEA,MAAI,CAAC,KAAK,UAAU,CAAC,CAAC,QAAQ,UAAU,OAAO,EAAE,SAAS,KAAK,MAAM,GAAG;AACtE,WAAO,KAAK,0BAA0B;AAAA,EACxC;AAEA,MAAI,KAAK,SAAS,CAAC,6BAA6B,KAAK,KAAK,KAAK,GAAG;AAChE,WAAO,KAAK,sBAAsB;AAAA,EACpC;AAEA,SAAO,EAAE,SAAS,OAAO,WAAW,GAAG,OAAO;AAChD;AAGA,SAAS,iBAAiB,SAAgD;AACxE,QAAM,aAAuB,CAAC;AAC9B,QAAM,SAAgB,CAAC;AACvB,MAAI,aAAa;AAEjB,MAAI,QAAQ,QAAQ;AAClB,QAAI,MAAM,QAAQ,QAAQ,MAAM,GAAG;AACjC,YAAM,eAAe,QAAQ,OAAO,IAAI,MAAM,IAAI,YAAY,EAAE,EAAE,KAAK,GAAG;AAC1E,iBAAW,KAAK,cAAc,YAAY,GAAG;AAC7C,aAAO,KAAK,GAAG,QAAQ,MAAM;AAAA,IAC/B,OAAO;AACL,iBAAW,KAAK,aAAa,YAAY,EAAE;AAC3C,aAAO,KAAK,QAAQ,MAAM;AAAA,IAC5B;AAAA,EACF;AAEA,MAAI,QAAQ,QAAQ;AAClB,QAAI,MAAM,QAAQ,QAAQ,MAAM,GAAG;AACjC,YAAM,eAAe,QAAQ,OAAO,IAAI,MAAM,IAAI,YAAY,EAAE,EAAE,KAAK,GAAG;AAC1E,iBAAW,KAAK,cAAc,YAAY,GAAG;AAC7C,aAAO,KAAK,GAAG,QAAQ,MAAM;AAAA,IAC/B,OAAO;AACL,iBAAW,KAAK,aAAa,YAAY,EAAE;AAC3C,aAAO,KAAK,QAAQ,MAAM;AAAA,IAC5B;AAAA,EACF;AAEA,MAAI,QAAQ,QAAQ;AAClB,eAAW,KAAK,qBAAqB,UAAU,uBAAuB,aAAa,CAAC,mBAAmB,aAAa,CAAC,GAAG;AACxH,UAAM,aAAa,IAAI,QAAQ,MAAM;AACrC,WAAO,KAAK,YAAY,YAAY,UAAU;AAC9C,kBAAc;AAAA,EAChB;AAEA,MAAI,QAAQ,WAAW;AACrB,eAAW,KAAK,mBAAmB,YAAY,EAAE;AACjD,WAAO,KAAK,QAAQ,SAAS;AAAA,EAC/B;AAEA,MAAI,QAAQ,SAAS;AACnB,eAAW,KAAK,mBAAmB,YAAY,EAAE;AACjD,WAAO,KAAK,QAAQ,OAAO;AAAA,EAC7B;AAEA,QAAM,QAAQ,WAAW,SAAS,IAAI,SAAS,WAAW,KAAK,OAAO,CAAC,KAAK;AAC5E,SAAO,EAAE,OAAO,OAAO;AACzB;AAGA,eAAe,YAAY,SAA4C;AACrE,MAAI;AACF,UAAM,MAAM,IAAI,IAAI,QAAQ,QAAQ,GAAG;AACvC,UAAM,OAAO,SAAS,IAAI,aAAa,IAAI,MAAM,KAAK,GAAG;AACzD,UAAM,QAAQ,KAAK,IAAI,SAAS,IAAI,aAAa,IAAI,OAAO,KAAK,IAAI,GAAG,GAAG;AAC3E,UAAM,UAAU,OAAO,KAAK;AAG5B,UAAM,UAAU;AAAA,MACd,QAAQ,IAAI,aAAa,IAAI,QAAQ;AAAA,MACrC,QAAQ,IAAI,aAAa,IAAI,QAAQ;AAAA,MACrC,QAAQ,IAAI,aAAa,IAAI,QAAQ;AAAA,MACrC,WAAW,IAAI,aAAa,IAAI,WAAW;AAAA,MAC3C,SAAS,IAAI,aAAa,IAAI,SAAS;AAAA,IACzC;AAGA,UAAM,YAAY,IAAI,aAAa,IAAI,YAAY,KAAK;AACxD,UAAM,YAAY,IAAI,aAAa,IAAI,YAAY,KAAK;AAGxD,UAAM,EAAE,OAAO,OAAO,IAAI,iBAAiB,OAAO;AAGlD,UAAM,aAAa,0CAA0C,KAAK;AAClE,UAAM,cAAc,MAAM,QAAQ,IAAI,GAAG,QAAQ,UAAU,EAAE,KAAK,GAAG,MAAM,EAAE,MAAM;AACnF,UAAM,QAAQ,aAAa,SAAS;AAGpC,UAAM,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAelB,KAAK;AAAA,iBACI,SAAS,IAAI,SAAS;AAAA,eACxB,OAAO,SAAS,CAAC,YAAY,OAAO,SAAS,CAAC;AAAA;AAGzD,UAAM,iBAAiB,MAAM,QAAQ,IAAI,GAAG,QAAQ,aAAa,EAC9D,KAAK,GAAG,QAAQ,OAAO,MAAM,EAC7B,IAAI;AAEP,UAAM,WAAW,eAAe,QAAQ,IAAI,CAAC,SAAc;AAAA,MACzD,IAAI,IAAI;AAAA,MACR,cAAc,IAAI;AAAA,MAClB,YAAY,IAAI;AAAA,MAChB,WAAW,IAAI;AAAA,MACf,WAAW,IAAI;AAAA,MACf,eAAe,IAAI;AAAA,MACnB,QAAQ,IAAI;AAAA,MACZ,OAAO,IAAI;AAAA,MACX,OAAO,IAAI;AAAA,MACX,aAAa,IAAI;AAAA,MACjB,QAAQ,IAAI;AAAA,MACZ,YAAY,IAAI;AAAA,MAChB,YAAY,IAAI;AAAA,MAChB,cAAc,IAAI,YAAY;AAAA,QAC5B,WAAW,IAAI;AAAA,QACf,YAAY,IAAI;AAAA,QAChB,aAAa,IAAI;AAAA,MACnB,IAAI;AAAA,IACN,EAAE;AAEF,UAAM,WAAuC;AAAA,MAC3C,MAAM;AAAA,MACN,YAAY;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACA,aAAa,KAAK,KAAK,QAAQ,KAAK;AAAA,QACpC,UAAU,SAAS,QAAQ;AAAA,QAC3B,UAAU,OAAO;AAAA,MACnB;AAAA,IACF;AAEA,WAAO,IAAI,SAAS,KAAK,UAAU,EAAE,SAAS,MAAM,GAAG,SAAS,CAAC,GAAG;AAAA,MAClE,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD,CAAC;AAAA,EAEH,SAAS,OAAO;AACd,YAAQ,MAAM,4BAA4B,KAAK;AAC/C,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS;AAAA,IACX,CAAC,GAAG;AAAA,MACF,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD,CAAC;AAAA,EACH;AACF;AAGA,eAAe,cAAc,SAA4C;AACvE,MAAI;AACF,UAAM,OAA6B,MAAM,QAAQ,QAAQ,KAAK;AAG9D,UAAM,aAAa,oBAAoB,IAAI;AAC3C,QAAI,CAAC,WAAW,SAAS;AACvB,aAAO,IAAI,SAAS,KAAK,UAAU;AAAA,QACjC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS;AAAA,QACT,SAAS,EAAE,cAAc,WAAW,OAAO;AAAA,MAC7C,CAAC,GAAG;AAAA,QACF,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAChD,CAAC;AAAA,IACH;AAGA,QAAI,cAAc,oBAAoB;AACtC,QAAI,WAAW;AACf,WAAO,WAAW,IAAI;AACpB,YAAM,WAAW,MAAM,QAAQ,IAAI,GAAG;AAAA,QACpC;AAAA,MACF,EAAE,KAAK,WAAW,EAAE,MAAM;AAE1B,UAAI,CAAC,SAAU;AACf,oBAAc,oBAAoB;AAClC;AAAA,IACF;AAEA,QAAI,YAAY,IAAI;AAClB,aAAO,IAAI,SAAS,KAAK,UAAU;AAAA,QACjC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS;AAAA,MACX,CAAC,GAAG;AAAA,QACF,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAChD,CAAC;AAAA,IACH;AAGA,UAAM,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQpB,UAAM,cAAa,oBAAI,KAAK,GAAE,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC;AACxD,UAAM,SAAS,MAAM,QAAQ,IAAI,GAAG,QAAQ,WAAW,EAAE;AAAA,MACvD;AAAA,MACA,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK,SAAS;AAAA,MACd,KAAK,SAAS;AAAA,MACd,KAAK,0BAA0B;AAAA,MAC/B,KAAK,2BAA2B;AAAA,MAChC,KAAK,kCAAkC;AAAA,MACvC,KAAK,WAAW;AAAA,MAChB,KAAK,eAAe;AAAA,MACpB;AAAA,MACA,KAAK,SAAS;AAAA,IAChB,EAAE,IAAI;AAEN,QAAI,CAAC,OAAO,SAAS;AACnB,YAAM,IAAI,MAAM,0BAA0B;AAAA,IAC5C;AAGA,UAAM,aAAa,MAAM,QAAQ,IAAI,GAAG;AAAA,MACtC;AAAA,IACF,EAAE,KAAK,OAAO,KAAK,WAAW,EAAE,MAAM;AAEtC,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA,IACX,CAAC,GAAG;AAAA,MACF,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD,CAAC;AAAA,EAEH,SAAS,OAAO;AACd,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS;AAAA,IACX,CAAC,GAAG;AAAA,MACF,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD,CAAC;AAAA,EACH;AACF;AAGA,eAAe,WAAW,SAA4C;AACpE,MAAI;AACF,UAAM,YAAY,QAAQ,QAAQ;AAClC,QAAI,CAAC,aAAa,MAAM,SAAS,SAAS,CAAC,GAAG;AAC5C,aAAO,IAAI,SAAS,KAAK,UAAU;AAAA,QACjC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS;AAAA,MACX,CAAC,GAAG;AAAA,QACF,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAChD,CAAC;AAAA,IACH;AAGA,UAAM,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBrB,UAAM,UAAU,MAAM,QAAQ,IAAI,GAAG,QAAQ,YAAY,EAAE,KAAK,SAAS,EAAE,MAAM;AAEjF,QAAI,CAAC,SAAS;AACZ,aAAO,IAAI,SAAS,KAAK,UAAU;AAAA,QACjC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS;AAAA,MACX,CAAC,GAAG;AAAA,QACF,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAChD,CAAC;AAAA,IACH;AAGA,UAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYzB,UAAM,cAAc,MAAM,QAAQ,IAAI,GAAG,QAAQ,gBAAgB,EAAE,KAAK,SAAS,EAAE,IAAI;AAEvF,UAAM,qBAAqB;AAAA,MACzB,GAAG;AAAA,MACH,cAAc,QAAQ,oBAAoB;AAAA,QACxC,WAAW,QAAQ;AAAA,QACnB,YAAY,QAAQ;AAAA,QACpB,aAAa,QAAQ;AAAA,MACvB,IAAI;AAAA,MACJ,cAAc,YAAY;AAAA,IAC5B;AAEA,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,SAAS;AAAA,MACT,MAAM;AAAA,IACR,CAAC,GAAG;AAAA,MACF,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD,CAAC;AAAA,EAEH,SAAS,OAAO;AACd,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS;AAAA,IACX,CAAC,GAAG;AAAA,MACF,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD,CAAC;AAAA,EACH;AACF;AAGA,eAAe,cAAc,SAA4C;AACvE,MAAI;AACF,UAAM,YAAY,QAAQ,QAAQ;AAClC,QAAI,CAAC,aAAa,MAAM,SAAS,SAAS,CAAC,GAAG;AAC5C,aAAO,IAAI,SAAS,KAAK,UAAU;AAAA,QACjC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS;AAAA,MACX,CAAC,GAAG;AAAA,QACF,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAChD,CAAC;AAAA,IACH;AAEA,UAAM,OAA6B,MAAM,QAAQ,QAAQ,KAAK;AAG9D,QAAI,OAAO,KAAK,IAAI,EAAE,SAAS,GAAG;AAChC,YAAM,aAAa,oBAAoB,EAAE,GAAG,MAAM,YAAY,KAAK,cAAc,SAAS,WAAW,KAAK,aAAa,SAAS,eAAe,KAAK,iBAAiB,cAAc,QAAQ,KAAK,UAAU,OAAO,CAAC;AAClN,UAAI,CAAC,WAAW,YAAY,KAAK,cAAc,KAAK,aAAa,KAAK,iBAAiB,KAAK,UAAU,KAAK,QAAQ;AACjH,eAAO,IAAI,SAAS,KAAK,UAAU;AAAA,UACjC,SAAS;AAAA,UACT,OAAO;AAAA,UACP,SAAS;AAAA,UACT,SAAS,EAAE,cAAc,WAAW,OAAO;AAAA,QAC7C,CAAC,GAAG;AAAA,UACF,QAAQ;AAAA,UACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,QAChD,CAAC;AAAA,MACH;AAAA,IACF;AAGA,UAAM,WAAW,MAAM,QAAQ,IAAI,GAAG,QAAQ,sCAAsC,EAAE,KAAK,SAAS,EAAE,MAAM;AAC5G,QAAI,CAAC,UAAU;AACb,aAAO,IAAI,SAAS,KAAK,UAAU;AAAA,QACjC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS;AAAA,MACX,CAAC,GAAG;AAAA,QACF,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAChD,CAAC;AAAA,IACH;AAGA,UAAM,eAAyB,CAAC;AAChC,UAAM,eAAsB,CAAC;AAE7B,QAAI,KAAK,eAAe,QAAW;AACjC,mBAAa,KAAK,gBAAgB;AAClC,mBAAa,KAAK,KAAK,UAAU;AAAA,IACnC;AACA,QAAI,KAAK,cAAc,QAAW;AAChC,mBAAa,KAAK,eAAe;AACjC,mBAAa,KAAK,KAAK,SAAS;AAAA,IAClC;AACA,QAAI,KAAK,kBAAkB,QAAW;AACpC,mBAAa,KAAK,mBAAmB;AACrC,mBAAa,KAAK,KAAK,aAAa;AAAA,IACtC;AACA,QAAI,KAAK,WAAW,QAAW;AAC7B,mBAAa,KAAK,YAAY;AAC9B,mBAAa,KAAK,KAAK,MAAM;AAAA,IAC/B;AACA,QAAI,KAAK,UAAU,QAAW;AAC5B,mBAAa,KAAK,WAAW;AAC7B,mBAAa,KAAK,KAAK,KAAK;AAAA,IAC9B;AACA,QAAI,KAAK,UAAU,QAAW;AAC5B,mBAAa,KAAK,WAAW;AAC7B,mBAAa,KAAK,KAAK,KAAK;AAAA,IAC9B;AACA,QAAI,KAAK,WAAW,QAAW;AAC7B,mBAAa,KAAK,YAAY;AAC9B,mBAAa,KAAK,KAAK,MAAM;AAAA,IAC/B;AAEA,QAAI,aAAa,WAAW,GAAG;AAC7B,aAAO,IAAI,SAAS,KAAK,UAAU;AAAA,QACjC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS;AAAA,MACX,CAAC,GAAG;AAAA,QACF,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAChD,CAAC;AAAA,IACH;AAEA,iBAAa,KAAK,gCAAgC;AAClD,iBAAa,KAAK,SAAS;AAE3B,UAAM,cAAc,uBAAuB,aAAa,KAAK,IAAI,CAAC;AAClE,UAAM,QAAQ,IAAI,GAAG,QAAQ,WAAW,EAAE,KAAK,GAAG,YAAY,EAAE,IAAI;AAGpE,UAAM,iBAAiB,MAAM,QAAQ,IAAI,GAAG,QAAQ,qCAAqC,EAAE,KAAK,SAAS,EAAE,MAAM;AAEjH,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA,IACX,CAAC,GAAG;AAAA,MACF,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD,CAAC;AAAA,EAEH,SAAS,OAAO;AACd,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS;AAAA,IACX,CAAC,GAAG;AAAA,MACF,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD,CAAC;AAAA,EACH;AACF;AAGA,eAAe,cAAc,SAA4C;AACvE,MAAI;AACF,UAAM,YAAY,QAAQ,QAAQ;AAClC,QAAI,CAAC,aAAa,MAAM,SAAS,SAAS,CAAC,GAAG;AAC5C,aAAO,IAAI,SAAS,KAAK,UAAU;AAAA,QACjC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS;AAAA,MACX,CAAC,GAAG;AAAA,QACF,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAChD,CAAC;AAAA,IACH;AAGA,UAAM,WAAW,MAAM,QAAQ,IAAI,GAAG,QAAQ,sCAAsC,EAAE,KAAK,SAAS,EAAE,MAAM;AAC5G,QAAI,CAAC,UAAU;AACb,aAAO,IAAI,SAAS,KAAK,UAAU;AAAA,QACjC,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS;AAAA,MACX,CAAC,GAAG;AAAA,QACF,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAChD,CAAC;AAAA,IACH;AAGA,UAAM,QAAQ,IAAI,GAAG;AAAA,MACnB;AAAA,IACF,EAAE,KAAK,YAAY,SAAS,EAAE,IAAI;AAElC,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,SAAS;AAAA,MACT,SAAS;AAAA,IACX,CAAC,GAAG;AAAA,MACF,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD,CAAC;AAAA,EAEH,SAAS,OAAO;AACd,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS;AAAA,IACX,CAAC,GAAG;AAAA,MACF,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD,CAAC;AAAA,EACH;AACF;AAGA,eAAsBA,WAAU,SAAiC;AAC/D,QAAM,EAAE,SAAS,KAAK,OAAO,IAAI;AAGjC,QAAMC,eAAc;AAAA,IAClB,+BAA+B;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,EAClC;AAGA,MAAI,QAAQ,WAAW,WAAW;AAChC,WAAO,IAAI,SAAS,MAAM,EAAE,SAASA,aAAY,CAAC;AAAA,EACpD;AAEA,MAAI;AACF,UAAM,MAAsB,EAAE,SAAS,KAAK,OAAO;AAEnD,YAAQ,QAAQ,QAAQ;AAAA,MACtB,KAAK;AACH,eAAO,QAAQ,KAAK,MAAM,WAAW,GAAG,IAAI,MAAM,YAAY,GAAG;AAAA,MACnE,KAAK;AACH,eAAO,MAAM,cAAc,GAAG;AAAA,MAChC,KAAK;AACH,eAAO,MAAM,cAAc,GAAG;AAAA,MAChC,KAAK;AACH,eAAO,MAAM,cAAc,GAAG;AAAA,MAChC;AACE,eAAO,IAAI,SAAS,KAAK,UAAU;AAAA,UACjC,SAAS;AAAA,UACT,OAAO;AAAA,UACP,SAAS;AAAA,QACX,CAAC,GAAG;AAAA,UACF,QAAQ;AAAA,UACR,SAAS,EAAE,GAAGA,cAAa,gBAAgB,mBAAmB;AAAA,QAChE,CAAC;AAAA,IACL;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,oBAAoB,KAAK;AACvC,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS;AAAA,IACX,CAAC,GAAG;AAAA,MACF,QAAQ;AAAA,MACR,SAAS,EAAE,GAAGA,cAAa,gBAAgB,mBAAmB;AAAA,IAChE,CAAC;AAAA,EACH;AACF;AA3mBA;AAAA;AAAA;AAAA;AAAA;AAYS;AAOA;AAiCA;AAiDM;AAwGA;AAqGA;AA4FA;AAwHA;AAqDO,WAAAD,YAAA;AAAA;AAAA;;;AC3jBtB;AAAA;;;ACAA;AAAA;;;ACAA;AAAA;AAKA,IAAO,iBAAQ;AAAA,EACb,MAAM,MAAM,SAAS,KAAK,KAAK;AAC7B,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,UAAM,WAAW,IAAI;AAGrB,QAAI,SAAS,WAAW,OAAO,GAAG;AAEhC,UAAI,SAAS,WAAW,WAAW,GAAG;AACpC,cAAM,EAAE,WAAAE,WAAU,IAAI,MAAM;AAC5B,eAAOA,WAAU,EAAE,SAAS,KAAK,IAAI,CAAC;AAAA,MACxC;AAGA,UAAI,aAAa,iBAAiB;AAChC,cAAM,EAAE,WAAAA,WAAU,IAAI,MAAM;AAC5B,eAAOA,WAAU,EAAE,SAAS,KAAK,IAAI,CAAC;AAAA,MACxC;AAGA,UAAI,SAAS,WAAW,eAAe,GAAG;AACxC,cAAM,EAAE,WAAAA,WAAU,IAAI,MAAM;AAC5B,eAAOA,WAAU,EAAE,SAAS,KAAK,IAAI,CAAC;AAAA,MACxC;AAAA,IACF;AAGA,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,SAAS;AAAA,MACT,OAAO;AAAA,MACP,MAAM;AAAA,MACN,qBAAqB;AAAA,QACnB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC,GAAG;AAAA,MACF,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,+BAA+B;AAAA,QAC/B,gCAAgC;AAAA,QAChC,gCAAgC;AAAA,MAClC;AAAA,IACF,CAAC;AAAA,EACH;AACF;;;ACtDA;AAAA;AAEA,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,UAAE;AACD,QAAI;AACH,UAAI,QAAQ,SAAS,QAAQ,CAAC,QAAQ,UAAU;AAC/C,cAAM,SAAS,QAAQ,KAAK,UAAU;AACtC,eAAO,EAAE,MAAM,OAAO,KAAK,GAAG,MAAM;AAAA,QAAC;AAAA,MACtC;AAAA,IACD,SAAS,GAAG;AACX,cAAQ,MAAM,4CAA4C,CAAC;AAAA,IAC5D;AAAA,EACD;AACD,GAb8B;AAe9B,IAAO,6CAAQ;;;ACjBf;AAAA;AASA,SAAS,YAAY,GAAmB;AACvC,SAAO;AAAA,IACN,MAAM,GAAG;AAAA,IACT,SAAS,GAAG,WAAW,OAAO,CAAC;AAAA,IAC/B,OAAO,GAAG;AAAA,IACV,OAAO,GAAG,UAAU,SAAY,SAAY,YAAY,EAAE,KAAK;AAAA,EAChE;AACD;AAPS;AAUT,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,SAAS,GAAQ;AAChB,UAAM,QAAQ,YAAY,CAAC;AAC3B,WAAO,SAAS,KAAK,OAAO;AAAA,MAC3B,QAAQ;AAAA,MACR,SAAS,EAAE,+BAA+B,OAAO;AAAA,IAClD,CAAC;AAAA,EACF;AACD,GAV8B;AAY9B,IAAO,2CAAQ;;;AHzBJ,IAAM,mCAAmC;AAAA,EAE9B;AAAA,EAAyB;AAC3C;AACA,IAAO,sCAAQ;;;AIVnB;AAAA;AAwBA,IAAM,wBAAsC,CAAC;AAKtC,SAAS,uBAAuB,MAAqC;AAC3E,wBAAsB,KAAK,GAAG,KAAK,KAAK,CAAC;AAC1C;AAFgB;AAShB,SAAS,uBACR,SACA,KACA,KACA,UACA,iBACsB;AACtB,QAAM,CAAC,MAAM,GAAG,IAAI,IAAI;AACxB,QAAM,gBAAmC;AAAA,IACxC;AAAA,IACA,KAAK,YAAY,QAAQ;AACxB,aAAO,uBAAuB,YAAY,QAAQ,KAAK,UAAU,IAAI;AAAA,IACtE;AAAA,EACD;AACA,SAAO,KAAK,SAAS,KAAK,KAAK,aAAa;AAC7C;AAfS;AAiBF,SAAS,kBACf,SACA,KACA,KACA,UACA,iBACsB;AACtB,SAAO,uBAAuB,SAAS,KAAK,KAAK,UAAU;AAAA,IAC1D,GAAG;AAAA,IACH;AAAA,EACD,CAAC;AACF;AAXgB;;;AL3ChB,IAAM,iCAAN,MAAM,gCAA8D;AAAA,EAGnE,YACU,eACA,MACT,SACC;AAHQ;AACA;AAGT,SAAK,WAAW;AAAA,EACjB;AAAA,EArBD,OAYoE;AAAA;AAAA;AAAA,EAC1D;AAAA,EAUT,UAAU;AACT,QAAI,EAAE,gBAAgB,kCAAiC;AACtD,YAAM,IAAI,UAAU,oBAAoB;AAAA,IACzC;AAEA,SAAK,SAAS;AAAA,EACf;AACD;AAEA,SAAS,oBAAoB,QAA0C;AAEtE,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAEA,QAAM,kBAA+C,gCACpD,SACA,KACA,KACC;AACD,QAAI,OAAO,UAAU,QAAW;AAC/B,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC9D;AACA,WAAO,OAAO,MAAM,SAAS,KAAK,GAAG;AAAA,EACtC,GATqD;AAWrD,SAAO;AAAA,IACN,GAAG;AAAA,IACH,MAAM,SAAS,KAAK,KAAK;AACxB,YAAM,aAAyB,gCAAU,MAAM,MAAM;AACpD,YAAI,SAAS,eAAe,OAAO,cAAc,QAAW;AAC3D,gBAAM,aAAa,IAAI;AAAA,YACtB,KAAK,IAAI;AAAA,YACT,KAAK,QAAQ;AAAA,YACb,MAAM;AAAA,YAAC;AAAA,UACR;AACA,iBAAO,OAAO,UAAU,YAAY,KAAK,GAAG;AAAA,QAC7C;AAAA,MACD,GAT+B;AAU/B,aAAO,kBAAkB,SAAS,KAAK,KAAK,YAAY,eAAe;AAAA,IACxE;AAAA,EACD;AACD;AAxCS;AA0CT,SAAS,qBACR,OAC8B;AAE9B,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAGA,SAAO,cAAc,MAAM;AAAA,IAC1B,mBAAyE,wBACxE,SACA,KACA,QACI;AACJ,WAAK,MAAM;AACX,WAAK,MAAM;AACX,UAAI,MAAM,UAAU,QAAW;AAC9B,cAAM,IAAI,MAAM,sDAAsD;AAAA,MACvE;AACA,aAAO,MAAM,MAAM,OAAO;AAAA,IAC3B,GAXyE;AAAA,IAazE,cAA0B,wBAAC,MAAM,SAAS;AACzC,UAAI,SAAS,eAAe,MAAM,cAAc,QAAW;AAC1D,cAAM,aAAa,IAAI;AAAA,UACtB,KAAK,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,MAAM;AAAA,UAAC;AAAA,QACR;AACA,eAAO,MAAM,UAAU,UAAU;AAAA,MAClC;AAAA,IACD,GAT0B;AAAA,IAW1B,MAAM,SAAwD;AAC7D,aAAO;AAAA,QACN;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AAAA,IACD;AAAA,EACD;AACD;AAnDS;AAqDT,IAAI;AACJ,IAAI,OAAO,wCAAU,UAAU;AAC9B,kBAAgB,oBAAoB,mCAAK;AAC1C,WAAW,OAAO,wCAAU,YAAY;AACvC,kBAAgB,qBAAqB,mCAAK;AAC3C;AACA,IAAO,kCAAQ;",
  "names": ["onRequest", "handleCORS", "corsHeaders", "jsonResponse", "onRequest", "corsHeaders", "onRequest"]
}
